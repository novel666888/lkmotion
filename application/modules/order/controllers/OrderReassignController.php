<?php
/**
 * Created by PhpStorm.
 * User: zzr
 * Date: 2018/8/24
 * Time: 11:02
 */

namespace application\modules\order\controllers;

use application\controllers\BossBaseController;
use application\modules\order\components\PhoneNumber;
use application\modules\order\models\OrderBoss;
use application\modules\order\models\OrderReassignmentRecord;
use application\modules\order\models\TagInfo;
use common\logic\order\CharterCarInfo;
use common\logic\order\CommonOrder;
use common\logic\TagRuleLogic;
use common\models\CarInfo;
use common\models\DriverInfo;
use common\models\Order;
use common\models\OrderRulePrice;
use common\models\PassengerInfo;
use common\services\CConstant;
use common\services\traits\PublicMethodTrait;
use common\services\YesinCarHttpClient;
use common\util\Common;
use common\util\Json;
use yii\base\UserException;
use yii\helpers\ArrayHelper;
use yii\httpclient\Client;

class OrderReassignController extends BossBaseController
{
    use PublicMethodTrait;

    private $_orderServiceTypeText = [
        CConstant::SERVICE_TYPE_REAL_TIME =>'实时派单',
        CConstant::SERVICE_TYPE_RESERVE => '预约订单',
        CConstant::SERVICE_AIRPORT_PICK_UP => '接机订单',
        CConstant::SERVICE_AIRPORT_DROP_OFF => '送机订单',
        CConstant::SERVICE_CHARTER_CAR_HALF_DAY => '包车订单',
        CConstant::SERVICE_CHARTER_CAR_FULL_DAY => '包车订单',
    ];

    private $_service_man_fixed_phone;

    public function init()
    {
        $this->_service_man_fixed_phone = \Yii::$app->params['serviceManFixedPhone'];
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param  int | OrderBoss $order
     * @throws UserException
     */

    private function _checkStatusBeforeReassign($order)
    {
        $can_reassign_order_status = [
            Order::ORDER_START,
            Order::STATUS_GRAB,
            Order::STATUS_RECEIVE_PASSENGER,
            Order::STATUS_DRIVER_ARRIVE
        ];
        if(is_numeric($order)){
            $order = OrderBoss::getOne($order);
        }
        if(!in_array($order->status, $can_reassign_order_status)){
            throw new UserException('内容冲突，请重新核查', 2002);
        }
        // 如果该订单未进行假派单成功,视为无效订单,则禁止改派 by zzr on 2018/11/2
        if($order->status == 1 && $order->is_fake_success == 0){
            throw new  UserException('无效订单,无法改派!',2003);
        }

    }

    /**
     * index
     *
     * @return array
     */
    public function actionIndex()
    {
        return Json::success();
    }

    /**
     * @throws \Throwable
     */

    public function actionPreReassign()
    {
        $request = $this->getRequest();
        $orderId = $request->post('orderId');
        $reasonType = $request->post('reasonType');
        $reasonText = trim($request->post('reasonText'));
        try{
            if(empty($orderId) || empty($reasonType)){
                throw new UserException('Params error!',2001);
            }
            $orderModel = OrderBoss::getOne($orderId);
            $this->_checkStatusBeforeReassign($orderModel);
            $attributes = [
                'order_id'=>$orderId,
                'reason_type'=>$reasonType,
                'reason_text'=>$reasonText,
                'operator'=>$this->userInfo['id'],
                'driver_id_before'=>!empty($orderModel->driver_id)?$orderModel->driver_id:0,
                'driver_name_before'=>!empty($orderModel->driver_id)?
                    $orderModel->driverInfo->driver_name:"",
            ];

            OrderReassignmentRecord::insertChunk($attributes);

            return Json::success();

        }catch (UserException $exception){
            return $this->renderErrorJson($exception);
        }catch (\Throwable $exception){
            \Yii::error($exception->getMessage());
            throw  $exception;
        }
    }

    /**
     * @return array|mixed
     * @throws \yii\base\InvalidConfigException
     */

    public function actionReassign()
    {
        $request = $this->getRequest();
        $orderId = intval($request->post('orderId'));

        $newDriverId = $request->post('newDriverId');
        $newDriverLongitude = $request->post('driverLongitude');
        $newDriverLatitude = $request->post('driverLatitude');
        try{
            if(empty($orderId) || empty($newDriverId)){
                throw new UserException('Params error!',1001);
            }
            $orderTable = OrderBoss::findOne($orderId);
            $newDriverName = DriverInfo::findOne($newDriverId)->driver_name;
            $this->_checkStatusBeforeReassign($orderTable);
            $distanceFromPassengerToDriver = $this->_computeDistanceFromDriverToPassenger($newDriverLongitude,$newDriverLatitude,$orderTable);
            $distanceFromPassengerToDriver =  round($distanceFromPassengerToDriver /1000,1);
            $oldDriverId = $orderTable->driver_id;
            //$orderModel = OrderBoss::getOne($orderId);
            $assignData = [
                'orderId'=>$orderId,
                'driverIdNow'=>$newDriverId
            ];
            $serverPath = ArrayHelper::getValue(\Yii::$app->params,'api.order');
            //var_dump($serverPath);exit;
            $httpClientDispatch = new YesinCarHttpClient(['serverURI'=>$serverPath['serverName']]);
            $responseDispatchData = $httpClientDispatch->post($serverPath['method']['reassign'],$assignData);
            if(!isset($responseDispatchData['code']) || $responseDispatchData['code']!=0){
                throw new UserException($responseDispatchData['message'],1003);
            }
            //record reassignment
            $orderReassignModel = OrderReassignmentRecord::getLastOne(['order_id'=>$orderId],false);
            if($orderReassignModel){
                $orderReassignModel->updateChunk([
                    'driver_id_now'=>$newDriverId,
                    'driver_name_now'=>$newDriverName,
                ]);
            }
            if(!empty($oldDriverId)){
                $this->_sendReassignMsg($orderTable,$oldDriverId,$newDriverId,$distanceFromPassengerToDriver);
            }else{
                $this->_sendManualReassignMsg($orderTable,$newDriverId,$newDriverName,$distanceFromPassengerToDriver); //人工改派发送信息
            }

            return Json::success();
        }catch (UserException $exception){
            return $this->renderErrorJson($exception);
        }


    }

    /**
     * compute distance from driver to passenger
     *
     * @param $driverLongitude
     * @param $driverLatitude
     * @param OrderBoss $orderTable
     * @return string
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */
    private  function _computeDistanceFromDriverToPassenger($driverLongitude,$driverLatitude,OrderBoss $orderTable)
    {
        if(empty($driverLatitude) || empty($driverLongitude) || empty($orderTable)){
            throw new UserException('Params error',2001);
        }
        $passengerLongitude = $orderTable->start_longitude;
        $passengerLatitude  = $orderTable->start_latitude;

        $server = ArrayHelper::getValue(\Yii::$app->params,'api.map');
        $httpClient = new YesinCarHttpClient(['serverURI'=>$server['serverName']]);
        $method = $server['method']['computeDistance'];
        /*** originLongitude originLatitude destinationLongitude	 destinationLatitude  */
        $clientData = [
            'originLongitude'=>$driverLongitude,
            'originLatitude'=>$driverLatitude,
            'destinationLongitude'=>$passengerLongitude,
            'destinationLatitude'=>$passengerLatitude
        ];
        $response = $httpClient->get($method,$clientData,2);
        if(isset($response['code']) && $response['code'] == 0){
            $distance = $response['data']['distance'];
        }else {
            \Yii::info($response);
            $distance = 0;
        }
        return (string)$distance;
    }

    /**
     * 改派发消息
     *
     * @param Order $orderTable
     * @param $oldDriverId
     * @param $newDriverId
     * @param $distanceFromPassengerToDriver
     * @param int $signalOldDriver
     * @param int $signalNewDriver
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _sendReassignMsg(\common\models\Order $orderTable,$oldDriverId,$newDriverId,$distanceFromPassengerToDriver,$signalOldDriver=603,$signalNewDriver = 4004)
    {
        //客服坐机电话
        $serviceManFixedPhone = \Yii::$app->params['serviceManFixedPhone'];
        $userFeature = $orderTable->user_feature;//1201加入用户特征标签(id)
        $userTagIds = explode(',',$userFeature);
        $tagList = TagInfo::fetchArray(['id'=>$userTagIds],[
            'tagId'=>'id',
            'tagName'=>'tag_name',
            'tagImg'=>'tag_img'
        ]);
        if($tagList){
            foreach ($tagList as $k => $v){
                $tagList[$k]['tagImg'] = \Yii::$app->params['ossFileUrl'].$v['tagImg'];
            }
        }
        $orderServiceType = (int)$orderTable->service_type; //订单服务类型
        $orderTime = $orderTable->order_start_time?$orderTable->order_start_time:$orderTable->start_time;
        $oldPlateNumber = $this->_getPlateNumberByDriverId($oldDriverId);
        $newPlateNumber = $this->_getPlateNumberByDriverId($newDriverId);

        $pushType = 3; //订单通知 类型
        $sendId = 'system';
        $messageTypeOut = 1;
        $sendIdentity = 1;
        $passengerId = $orderTable->passenger_info_id;
        $passengerNickName = PassengerInfo::fetchFieldBy(['id'=>$passengerId],'passenger_name'); //乘客昵称
        $passengerPhone = Common::decryptCipherText($orderTable->passenger_phone,true);//订车人电话
        $otherPhone = Common::decryptCipherText($orderTable->other_phone,true);//乘车人电话(为他人叫车)
        $oldDriverPhone = Common::decryptCipherText($orderTable->driver_phone,true);//原司机电话
        $newDriverPhoneCipher = DriverInfo::findOne($newDriverId)->phone_number;
        $newDriverPhone =  Common::decryptCipherText($newDriverPhoneCipher,true);//新司机电话
        $startAddress  = $orderTable->start_address;
        $endAddress = $orderTable->end_address;
        //给乘客推送信息
        $messageContentPassenger = [
            'content' => date('m') . '月' . date('d') . '日从' . $startAddress . '到' . $endAddress . '的'.$this->_orderServiceTypeText[$orderServiceType].'已由' . $oldPlateNumber . '调整为' . $newPlateNumber . '。',
            'messageType' => 603,//临时类型,//发给乘客改派成功
            'orderId' => (string)$orderTable->id,
            'title' => '订单改派成功',
        ];
        $pushDataToPassenger     = [
            'acceptId' => $passengerId,
            'sendId' => $sendId,
            'acceptIdentity' => 1,//1.乘客身份  2.司机身份
            'sendIdentity' => $sendIdentity,
            'messageType' => $messageTypeOut,
            'messageBody' => $messageContentPassenger,
            'title' => '订单改派成功',
        ];
        \Yii::info('发送给乘客');
        \Yii::info($pushDataToPassenger);
        // public static function sendMessageNew($phone, $smsId, $data){
        self::jpush($pushType, $pushDataToPassenger,1);
        /************************************以上给乘客推送消息*************************************/
        //给老司机发推送消息
        if($orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
            $toOldDriverContent = Common::convertTimeToNaturalLanguage($orderTime). ',乘客尾号' . Common::getHidePhone($passengerPhone) . ',地点从' . $startAddress . '到' . $endAddress.'的'.$this->_orderServiceTypeText[$orderServiceType].'已改派成功.';
        }else{
            $toOldDriverContent = Common::convertTimeToNaturalLanguage($orderTime). ',乘客尾号' . Common::getHidePhone($passengerPhone) . ',从' . $startAddress . '上车的'.$this->_orderServiceTypeText[$orderServiceType].'已改派成功.';

        }
        if ($oldDriverId) {  //如果有老司机
            $messageContentOldDriver = [
                //'content' => '时间' . $orderTime . ',乘客尾号' . Common::getHidePhone($passengerPhone) . ',地点从' . $startAddress . '到' . $endAddress . '的订单已经改派',
                'content' =>  $toOldDriverContent,
                'messageType' => $signalOldDriver,
                'startAddress' => $startAddress,
                'endAddress' => $endAddress,
                'isFollowing' => $orderTable->is_following,
                'serviceType' => $orderTable->service_type,
                'orderId' => (string)$orderTable->id,
                'title' => '订单改派成功',
            ];
            $pushDataToOldDriver     = [
                'acceptId' => $oldDriverId,
                'sendId' => $sendId,
                'acceptIdentity' => 2,//1.乘客身份  2.司机身份
                'sendIdentity' => $sendIdentity,
                'messageType' => $messageTypeOut,
                'messageBody' => $messageContentOldDriver,
                'title' => '订单改派成功',
            ];
            \Yii::info('发送给老司机');
            \Yii::info($pushDataToOldDriver);
            self::jpush($pushType, $pushDataToOldDriver,1);
        }
        /****************************以上消息推送给老司机(如果存在)****************************/
        $orderRulePrice = OrderRulePrice::findOne(['order_id' => $orderTable->id, 'category' => CConstant::TYPE_FORECAST_ORDER]);
        if (!empty($orderRulePrice)) {
            $orderForecastDistance = $orderRulePrice->total_distance;
            $orderForecastPrice    = $orderRulePrice->total_price;
            $orderTotalTime = $orderRulePrice->total_time;
        } else {
            $orderTotalTime =$orderForecastDistance = $orderForecastPrice = "";
        } // 以上获取订单预估价格与订单预估距离

        if($orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
            $content = vsprintf('%s,乘客尾号%s,从%s到%s的%s,预计行程%s公里,价格%s元,请您合里安排接送时间.', [
                Common::convertTimeToNaturalLanguage($orderTime),
                Common::getHidePhone($passengerPhone),
                $startAddress,
                $endAddress,
                $this->_orderServiceTypeText[$orderServiceType],
                $orderForecastDistance,
                $orderForecastPrice
            ]);
        }else{
            $content = vsprintf('%s,乘客尾号%s,从%s上车的%s,预计行程%s公里,价格%s元,请您合里安排接送时间.', [
                Common::convertTimeToNaturalLanguage($orderTime),
                Common::getHidePhone($passengerPhone),
                $startAddress,
                $this->_orderServiceTypeText[$orderServiceType],
                $orderForecastDistance,
                $orderForecastPrice
            ]);
        }

        $messageContentNewDriver = [
            //'content' => Common::convertTimeToNaturalLanguage($orderTime).',乘客尾号' . Common::getHidePhone($passengerPhone) . ',地点从' . $startAddress . '到' . $endAddress .'的'.$this->_orderServiceTypeText[$orderServiceType].',预计行程' . $orderForecastDistance . '公里,价格' . $orderForecastPrice . '元,请您合里安排接送时间。',
            'content' => $content,
            'messageType' => $signalNewDriver,
            'startAddress' => $startAddress,
            'endAddress' => $endAddress,
            'isFollowing' => $orderTable->is_following,
            'serviceType' => $orderTable->service_type,
            'orderId' => (string)$orderTable->id,
            'title' => '收到一条系统派单',
            'startTime'=>$orderTime, //订单服务时间
            'duration'=>$orderTotalTime,
            'totalDistance'=>$orderForecastDistance,
            'totalPrice'=>$orderForecastPrice,
            'startAddressDistance'=>$distanceFromPassengerToDriver, //司机与乘客的距离,
            //'userFeature'=>$orderTable->user_feature, //920女性场景
            'tagList' => $tagList,
        ];
        //1201包车信m小时n公里信息
        if($orderServiceType == CConstant::SERVICE_CHARTER_CAR_HALF_DAY || $orderServiceType == CConstant::SERVICE_CHARTER_CAR_FULL_DAY) {
            $orderCityCode = (new CommonOrder($orderTable->id))->getCityCode();
            $messageContentNewDriver['charterCarInfo'] = (new CharterCarInfo($orderCityCode,$orderServiceType))->getCharterCarTimePhase();
        }
        /********************************************************************/
        $pushDataToNewDriver     = [
            'acceptId' => $newDriverId,
            'sendId' => $sendId,//
            'acceptIdentity' => 2,//1.乘客身份  2.司机身份
            'sendIdentity' => $sendIdentity,
            'messageType' => $messageTypeOut,
            'messageBody' => $messageContentNewDriver,
            'title' => '收到一条系统派单',
        ];
        \Yii::info('发送给新司机');
        \Yii::info($pushDataToNewDriver);
        self::jpush($pushType, $pushDataToNewDriver,1);
        /***********************************以上给新司机发推送消息*******************************************/

        ////////////////////////////////////发短信给订车人/////////////////////
        //改派-通知订车人
        //$smsTemplateNoticeCabRunner = 'SMS_144943002'; //on 11-5
        $smsTemplateNoticeCabRunner = 'HX_0027'; //on 11-5
        //新阿里小号
        $orderRecently = Order::findOne($orderTable->id);
        $newMappingNumber = $orderRecently->mapping_number;
        $newMappingNumberOther = $orderRecently->other_mapping_number;
        /***【逸品出行】用户您好，@的订单已为您改派同等级车辆。改派时间@,车牌号@,@，将准时接驾。司机将会提前@到达指定位置，如有问题请随时联系客服。客服热线@，祝您出行愉快！*/
        /**
         * HX_0027
         * 【逸品出行】用户您好，@@@@@的订单已为您改派同等级车辆。改派时间@,车牌号@,手机号@，将准时接驾。如有问题请随时联系客服。客服热线@，祝您出行愉快
         */
        if($orderTable->service_type < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
            $orderInfo = vsprintf('%s从%s到%s',[
                Common::convertTimeToNaturalLanguage($orderTime),
                $orderTable->start_address,
                $orderTable->end_address,
            ]);
        }else{
            $orderInfo = vsprintf('%s从%上车',[
                Common::convertTimeToNaturalLanguage($orderTime),
                $orderTable->start_address,
            ]);
        }
        $smsTemplateNoticeCabRunnerData = [
            'orderInfo' => $orderInfo,
            'reassignTime'=>date('Y-m-d H:i:s'),
            'new_plate_number'=>$newPlateNumber,
            'new_driver_phone'=>empty($newMappingNumber)?$newDriverPhone:$newMappingNumber,
            'service_fixed_phone'=>$serviceManFixedPhone,
        ];
        Common::sendMessageNew($passengerPhone,$smsTemplateNoticeCabRunner,$smsTemplateNoticeCabRunnerData);
        ////////////////////////////////////////////////////改派-通知乘车人
        if($orderTable->order_type == 2){
            //$smsTemplateNoticeOther = 'SMS_144853644';
            $smsTemplateNoticeOther = 'HX_0011';
            /**【逸品出行】尊敬的逸品出行用户，用户@为您安排用车时间为@的订单已由@改派为@的师傅服务，电话号：@，如有疑问可致电客服热线@。*/
            $smsTemplateNoticeOtherData = [
                'passenger_name'=>$passengerNickName,
                'time'=>Common::convertTimeToNaturalLanguage($orderTime),
                'old_plate_number'=>$oldPlateNumber,
                'new_plate_number'=>$newPlateNumber,
                //为他人叫车,绑定阿里小号为other_mapping_number
                'mapping_number'=>empty($newMappingNumberOther)?$newDriverPhone:$newMappingNumberOther,
                'serviceManFixedPhone'=>\Yii::$app->params['serviceManFixedPhone'],
            ];
            Common::sendMessageNew($otherPhone,$smsTemplateNoticeOther,$smsTemplateNoticeOtherData);
        }
        //尾号显示阿里小号，如果没有阿里有号则为原号码
        //$passengerPhoneMapping = empty($orderTable->mapping_number)?$passengerPhone:$orderTable->mapping_number;
            $smsTemplateNoticeOldDriver = 'HX_0012'; //通知原司机
            /**【逸品出行】时间@,乘客尾号@,从@到@的实时订单，已改派成功。*/
            if($orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
                $toOldDriverAddressInfo = $startAddress . '到' . $endAddress;
            }else{
                $toOldDriverAddressInfo = $startAddress .'上车';
            }
            $smsTemplateNoticeOldDriverData     = [
                'time' => Common::convertTimeToNaturalLanguage($orderTime),
                'phone' => Common::getHidePhone(($orderTable->order_type == 1) ? $passengerPhone : $otherPhone),  // 乘车是自己或他人
                //'start_address' => $startAddress,
                //'end_address' => $endAddress,
                'addressInfo' => $toOldDriverAddressInfo,
                'orderServiceType'=>$this->_orderServiceTypeText[$orderServiceType]
            ];
            Common::sendMessageNew($oldDriverPhone, $smsTemplateNoticeOldDriver, $smsTemplateNoticeOldDriverData);
                $smsTemplateNoticeNewDriver = 'HX_0010'; //通知新司机
                /**
                 * 'HX_0010'
                 * 【逸品出行】您收到一条@，时间@乘客尾号@，@@@@@的订单，请合理安排接乘时间。。
                 */
                $addressCommonTemplate = '从%s到%s';
                $addressCharterCarTemplate = '从%s上车';
                if( $orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY ){
                    $address = vsprintf($addressCommonTemplate,[$startAddress,$endAddress]);
                }else{
                    $address = vsprintf($addressCharterCarTemplate,[$startAddress]);
                }
                $smsTemplateNoticeDataNewDriver = [
                    'order_service_type'=>$this->_orderServiceTypeText[$orderServiceType],
                    'time' => Common::convertTimeToNaturalLanguage($orderTime),
                    'phone' => Common::getHidePhone(($orderTable->order_type == 1) ? $passengerPhone : $otherPhone),  // 乘车是自己或他人
                    //'start' => $startAddress,
                    //'end' => $endAddress,
                    'address' => $address,
                ];
                Common::sendMessageNew($newDriverPhone, $smsTemplateNoticeNewDriver,$smsTemplateNoticeDataNewDriver);

    }


    /**
     * 人工改派发消息
     *
     * @param Order $orderTable
     * @param $newDriverId
     * @param $driverName
     * @param $distanceFromPassengerToDriver
     * @param int $signal
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _sendManualReassignMsg(\common\models\Order $orderTable,$newDriverId,$driverName,$distanceFromPassengerToDriver,$signal = 4004)
    {
        $userFeature = $orderTable->user_feature;//1201加入用户特征标签(id)
        $userTagIds = explode(',',$userFeature);
        $tagList = TagInfo::fetchArray(['id'=>$userTagIds],[
            'tagId'=>'id',
            'tagName'=>'tag_name',
            'tagImg'=>'tag_img'
        ]);
        if($tagList){
            foreach ($tagList as $k => $v){
                $tagList[$k]['tagImg'] = \Yii::$app->params['ossFileUrl'].$v['tagImg'];
            }
        }
        $pushType = 3; //订单通知 类型
        $passengerPhone = Common::decryptCipherText($orderTable->passenger_phone,true);
        $otherPhone = Common::decryptCipherText($orderTable->other_phone,true);
        $driverPhoneCipher = DriverInfo::fetchFieldBy(['id'=>$newDriverId],'phone_number');
        $driverPhone = Common::decryptCipherText($driverPhoneCipher,true);
        $orderServiceType = (int)$orderTable->service_type;

        $passengerNickName = PassengerInfo::fetchFieldBy(['id'=>$orderTable->passenger_info_id],'passenger_name');
        $startAddress  = $orderTable->start_address;
        $endAddress = $orderTable->end_address;
        $plateNumber = $this->_getPlateNumberByDriverId($newDriverId);
        $carColor = $this->_getCarColorByDriverId($newDriverId);
        if(empty($passengerPhone)){
            throw new UserException('Cannot find passenger phone!',2001);
        }
        $pushDataBase = [
            'sendId'=>'system',
            'messageType'=>1,
            'sendIdentity'=>1,
        ];
        $orderTime  = $orderTable->start_time; // 下单时间
        $useCarTime = (!empty($orderTable->order_start_time))?$orderTable->order_start_time:$orderTime; //用车时间;
        //向司机发送推送消息
        $orderRulePrice = OrderRulePrice::findOne(['order_id' => $orderTable->id, 'category' => CConstant::TYPE_FORECAST_ORDER]);
        if (!empty($orderRulePrice)) {
            $orderForecastDistance = $orderRulePrice->total_distance;
            $orderForecastPrice    = $orderRulePrice->total_price;
            $orderTotalTime = $orderRulePrice->total_time;
        } else {
            $orderTotalTime = $orderForecastDistance = $orderForecastPrice = "";
        } // 以上获取订单预估价格与订单预估距离
        /**
         * "orderStartTime": "2018-09-18 15:20:00",
            "duration": "13.00",
        "totalDistance": "4.76",
        "totalPrice": "36.00",
         */
        /*************************920场景版***********************************/

        /**************************************sms end *************************************/
        if($orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
            $content = vsprintf('%s,乘客尾号%s,从%s到%s的%s,预计行程%s公里,价格%s元,请您合里安排接送时间.', [
                Common::convertTimeToNaturalLanguage($useCarTime),
                Common::getHidePhone($passengerPhone),
                $startAddress,
                $endAddress,
                $this->_orderServiceTypeText[$orderServiceType],
                $orderForecastDistance,
                $orderForecastPrice
            ]);
        }else{
            $content = vsprintf('%s,乘客尾号%s,从%s上车的%s,预计行程%s公里,价格%s元,请您合里安排接送时间.', [
                Common::convertTimeToNaturalLanguage($useCarTime),
                Common::getHidePhone($passengerPhone),
                $startAddress,
                $this->_orderServiceTypeText[$orderServiceType],
                $orderForecastDistance,
                $orderForecastPrice
            ]);
        }

        $messageContentNewDriver = [
            'content' => $content,
            'messageType' => 4004,
            'startAddress' => $startAddress,
            'endAddress' => $endAddress,
            'isFollowing' => $orderTable->is_following,
            'serviceType' => $orderTable->service_type,
            'orderId' => $orderTable->id,
            'title' => '收到一条系统派单',
            'startTime'=>$useCarTime,
            'duration'=>$orderTotalTime,
            'totalDistance'=>$orderForecastDistance,
            'totalPrice'=>$orderForecastPrice,
            'startAddressDistance'=>$distanceFromPassengerToDriver, //司机与乘客的距离
            //'userFeature'=>$orderTable->user_feature, //920女性场景,
            'tagList'=>$tagList,

        ];
        //1201包车信m小时n公里信息
        if($orderServiceType == CConstant::SERVICE_CHARTER_CAR_HALF_DAY || $orderServiceType == CConstant::SERVICE_CHARTER_CAR_FULL_DAY) {
            $orderCityCode = (new CommonOrder($orderTable->id))->getCityCode();
            $messageContentNewDriver['charterCarInfo'] = (new CharterCarInfo($orderCityCode,$orderServiceType))->getCharterCarTimePhase();
        }
        \Yii::info($messageContentNewDriver,'manual-reassign');
        /********************************************************************/
        $pushDataToNewDriver     =ArrayHelper::merge([
            'acceptId'=>$newDriverId,
            'acceptIdentity' => 2,//1.乘客身份  2.司机身份
            'messageBody' => $messageContentNewDriver,
            'title' => '收到一条系统派单',
        ],$pushDataBase);
        \Yii::info('发送司机');
        \Yii::info($pushDataToNewDriver);
        self::jpush($pushType, $pushDataToNewDriver,1);
        //1201 发送短信给新司机
        $smsToDriverTemplate = 'HX_0010';

        $addressCommonTemplate = '从%s到%s';
        $addressCharterCarTemplate = '从%s上车';
        if( $orderServiceType < CConstant::SERVICE_CHARTER_CAR_HALF_DAY ){
            $address = vsprintf($addressCommonTemplate,[$startAddress,$endAddress]);
        }else{
            $address = vsprintf($addressCharterCarTemplate,[$startAddress]);
        }

        $smsToDriverTemplateData = [
            'order_service_type' => $this->_orderServiceTypeText[$orderServiceType],
            'time' => Common::convertTimeToNaturalLanguage($useCarTime),
            'phone' => Common::getHidePhone(($orderTable->order_type == 1) ? $passengerPhone : $otherPhone),  // 乘车是自己或他人
            //'start' => $startAddress,
            //'end' => $endAddress,
            'address' => $address
        ];
        Common::sendMessageNew($driverPhone,$smsToDriverTemplate,$smsToDriverTemplateData);

        /********************************************以上级司机推送消息与短信**********************/
        $messageContentPassenger = [
            'content' => sprintf('尊敬的的逸品出行用户,你%s的订单已指派给%s师傅,车牌号%s,车身颜色%s',$orderTime,$driverName,$plateNumber,$carColor),
            'messageType' => 604,  //人工改派
            'orderId' => $orderTable->id,
            'title' => '人工派单成功',
        ];
        $pushDataToPassenger     = ArrayHelper::merge([
            'acceptId' => $orderTable->passenger_info_id,
            'acceptIdentity' => 1,//1.乘客身份  2.司机身份
            'messageBody' => $messageContentPassenger,
            'title' => '人工派单成功',
        ],$pushDataBase);
        \Yii::info('发送给乘客');
        \Yii::info($pushDataToPassenger);
        self::jpush($pushType, $pushDataToPassenger,1);
        /************************************以上给乘客推送消息*************************************/
        //以在发送短信给下单人
        $smsTemplateNoticeCabRunner = 'HX_0027';
        /**
         * HX_0027
         * 【逸品出行】用户您好，@@@@@的订单已为您改派同等级车辆。改派时间@,车牌号@,手机号@，将准时接驾。如有问题请随时联系客服。客服热线@，祝您出行愉快
         */
        if($orderTable->service_type < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
            $orderInfo = vsprintf('%s从%s到%s',[
                Common::convertTimeToNaturalLanguage($useCarTime),
                $orderTable->start_address,
                $orderTable->end_address,
            ]);
        }else{
            $orderInfo = vsprintf('%s从%上车',[
                Common::convertTimeToNaturalLanguage($useCarTime),
                $orderTable->start_address,
            ]);
        }
        //司机最新阿里小号
        $recentlyOrder = OrderBoss::findOne($orderTable->id);
        if($recentlyOrder){
            $driverPhoneNewMappingNumber = $recentlyOrder->mapping_number;
        }else {
            $driverPhoneNewMappingNumber = '';
        }
        /********************司机最新阿里小号***********************/

        $smsTemplateNoticeCabRunnerData = [
            'orderInfo'=>$orderInfo,
            'reassignTime'=>date('Y-m-d H:i:s'),
            'plateNumber'=>$plateNumber,
            'driverPhone'=>empty($driverPhoneNewMappingNumber)?$driverPhone:$driverPhoneNewMappingNumber,
            'serviceManFixedPhone'=>$this->_service_man_fixed_phone
        ];
        Common::sendMessageNew($passengerPhone,$smsTemplateNoticeCabRunner,$smsTemplateNoticeCabRunnerData);
        /******************************** 以上定车人发短信**************************************/
        /********************************以下是如果是给他人定车,给他人手机发送短信******************/
        if($orderTable->order_type == 2 && !empty($orderTable->other_phone)){
            $smsTemplateNoticeCarMan = 'HX_0017';
            /**
             * HX_0017
             * 【逸品出行】尊敬的逸品出行用户，用户@为您安排用车时间为@的订单已指派给@师傅，车牌号：@，车身颜色：@色，如有疑问可致电客服热线@。
             */
            $smsTemplateNoticeCarManData = [
                'passenger_name'=>$passengerNickName,
                'time'=>$useCarTime,
                'driverName'=>$driverName,
                'plateNumber'=>$plateNumber,
                'color'=>$carColor,
                'serviceManFixedPhone'=>$this->_service_man_fixed_phone,
            ];
            Common::sendMessageNew($otherPhone,$smsTemplateNoticeCarMan,$smsTemplateNoticeCarManData);
        }
        /*****************************为他人叫车 给他人手机发短信********************************/
    }

    /**
     * 车色
     *
     * @param $driverId
     * @return string
     */

    private function _getCarColorByDriverId($driverId)
    {
        $driverTable = DriverInfo::findOne($driverId);
        if(!$driverTable || empty($driverTable->car_id)){
            return "";
        }
        $carInfoTable = CarInfo::findOne($driverTable->car_id);
        if(empty($carInfoTable) || empty($carInfoTable->color)){
            return "";
        }
        return $carInfoTable->color;
    }

    /**
     * 获取车牌号根据司机id
     *
     * @param $driverId
     * @return string
     */

    private function _getPlateNumberByDriverId($driverId)
    {
        $driverTable = DriverInfo::findOne($driverId);
        if(!$driverTable || empty($driverTable->car_id)){
            return "";
        }
        $carInfoTable = CarInfo::findOne($driverTable->car_id);
        if(empty($carInfoTable) || empty($carInfoTable->plate_number)){
            return "";
        }
        return $carInfoTable->plate_number;
    }


    /**
     * @return mixed
     * @throws \Throwable
     */

    public function actionGetReassignOrderInfo()
    {
        $request = $this->getRequest();
        $orderId = $request->post('orderId');
        try{
            $orderModel = OrderBoss::getOne($orderId);
            $returnData = [
                'orderId'=>$orderModel->id,
                'orderNum'=>$orderModel->order_number,
                'plateNum'=>$orderModel->plate_number,
                'useCarTime'=>$orderModel->order_start_time,
                'startAddress'=>$orderModel->start_address,
                'endAddress'=>$orderModel->end_address,
                'startLongitude'=>$orderModel->start_longitude,
                'startLatitude'=>$orderModel->start_latitude,
                'driverName'=>$orderModel->driverInfo?$orderModel->driverInfo->driver_name:'',
            ];

            $orderCity = OrderRulePrice::fetchOne(['order_id'=>$orderId,'category'=>CConstant::TYPE_FORECAST_ORDER],
                [
                    'cityName'=>'city_name',
                    'cityCode'=>'city_code' //1201版加入,查询标签需要用到cityCode By 2018-10-29
                ]

            );
            if(!$orderCity){
                $orderCity = ['cityName'=>'', 'cityCode'=>''];
            }
            $returnData=ArrayHelper::merge($returnData,$orderCity);
            return Json::success($returnData);
        }catch (UserException $exception){

            return $this->renderErrorJson($exception);
        }catch (\Throwable $exception) {
            \Yii::error($exception);
            throw $exception;
        }

    }

    /**
     * @return mixed
     * @throws \Throwable
     */

    public function actionQueryDriver()
    {
        $request = $this->getRequest();
        $orderId = $request->post('orderId');
        $scope = $request->post('scope');
        $tags = $request->post('tags'); //1201版加入司机标签筛选
        try{
            if(empty($orderId) || empty($scope)){
                throw new UserException('Params error!',1001);
            }
            $orderModel = OrderBoss::getOne($orderId);
            $orderRulePriceModel = OrderRulePrice::getOne(['order_id'=>$orderId,'category'=>0]);
            $postData = [
                'orderId'=>$orderId,
                'orderType'=>1,
                'customerDeviceId'=>$orderModel->device_code,
                //'customerDeviceId'=>'bd6a168a-1212-4ba6-a38f-0b911e99c341',
                'vehicleType'=>$orderRulePriceModel->car_level_id,
                'orderCity'=>$orderRulePriceModel->city_code,
                'orderTime'=> (int)strtotime($orderModel->start_time).'000',
                'startTime'=> (int)strtotime($orderModel->order_start_time).'000',
                'startName'=>$orderModel->start_address,
                'startLongitude'=>$orderModel->start_longitude,
                'startLatitude'=>$orderModel->start_latitude,
                'endName'=>$orderModel->end_address,
                'endLongitude'=>$orderModel->end_longitude,
                'endLatitude'=>$orderModel->end_latitude,
                'radius'=>$scope,
                'maxCount'=>20,
            ];
            $oldCarId = OrderBoss::fetchFieldBy(['id'=>$orderId],'car_id');  //定单原司机

            //$path = ArrayHelper::getValue(\Yii::$app->params,'api.map');
            $path = ArrayHelper::getValue(\Yii::$app->params,'api.dispatch');
            $httpClient = new YesinCarHttpClient(['serverURI'=>$path['serverName']]);
            //$response = $httpClient->post($path['method']['vehicleDispatch'],$postData,Client::FORMAT_JSON,['timeout'=>8]);
            $response = $httpClient->post($path['method']['queryCar'],$postData,Client::FORMAT_JSON,['timeout'=>8]);
            if(!isset($response['code']) || $response['code'] !=0){
                throw new UserException($response['message'],1002);
            }
            if(empty($response['data']['vehicles'])){
                throw new UserException('附近未查询到司机!',1003);
            }
            if(!empty($oldCarId)){
                $response['data']['vehicles'] = array_filter($response['data']['vehicles'],function($v) use ($oldCarId){
                    return $v['vehicleId']!= $oldCarId;
                });
            }
            $response['data']['vehicles'] = array_values($response['data']['vehicles']);//去除原司机
            //print_r($response);exit; //100117
            foreach ($response['data']['vehicles'] as $k =>$vehicle) {
                $driveInfo = DriverInfo::fetchOne([
                    'car_id'=>$vehicle['vehicleId'],
                    'use_status' => 1,
                    'sign_status' => 1,
                    'work_status' => 1,
                ],[
                    'driverId'=>'id',
                    'phone'=>'phone_number',
                    'driveName'=>'driver_name',
                    'driveTags'=>'tags',
                ]);
                $plateNum = CarInfo::fetchFieldBy(['id'=>$vehicle['vehicleId']],'plate_number');
                if(empty($driveInfo) || empty($plateNum)){
                    unset($response['data']['vehicles'][$k]);
                }else{
                    if($tags){ //筛选带标签的司机
                        $arrDriverTags = explode(',',$driveInfo['driveTags']);
                        $arrDriverTags = array_filter($arrDriverTags,function($v){return !empty($v);});
                        $arrDriverTags = array_values($arrDriverTags);
                        $arrTags = explode(',',$tags);
                        $arrTags =  array_filter($arrTags,function($v){return !empty($v);});
                        $arrTags = array_values($arrTags);
                        if(!Common::arrIsContained($arrTags,$arrDriverTags)){
                            unset($response['data']['vehicles'][$k]);
                            continue;
                        }
                    }
                    /*** 只展示签约状态服务中，并且已经绑定车辆，未有行程中订单，且距离用车时间前后1.5（可服务司机时间：后台可配置）个小时均无可服务订单的司机*/
                    $response['data']['vehicles'][$k] = array_merge($response['data']['vehicles'][$k],$driveInfo);
                    $response['data']['vehicles'][$k]['plateNumber'] = $plateNum;
                }

            }
            $response['data']['vehicles'] = array_values($response['data']['vehicles']);
            //var_dump($response['data']['vehicles'] );exit;
            $response['data']['vehicles'] = PhoneNumber::mappingCipherToPhoneNumber($response['data']['vehicles'],['phone']);
            return Json::success($response['data']);

        }catch (UserException $exception){
            return $this->renderErrorJson($exception);
        }catch (\Throwable $exception){
            \Yii::error($exception->getMessage());
            throw $exception;
        }

    }

    /**
     * 筛选司机标签列表
     *
     * @return array
     */

    public function actionGetTags()
    {
        $cityCode = $this->getRequest()->post('cityCode');
        $result = TagRuleLogic::getInfoByCityCode($cityCode);
        $result = Common::key2lowerCamel($result);

        return Json::success($result);
    }

    public function actionTest()
    {

    }




}
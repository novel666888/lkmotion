<?php
/**
 * Created by PhpStorm.
 * User: zzr
 * Date: 2018/6/26
 * Time: 17:28
 */
namespace common\models;

use common\services\traits\ModelTrait;
use yii\base\UserException;
use yii\db\ActiveRecord;

/**
 * Class BaseModel
 * @package common\models
 * @property string $create_time
 */
class BaseModel extends ActiveRecord
{

    public static $returnCols;

    public function init()
    {
        $this->on(self::EVENT_BEFORE_INSERT,function($event){
            $event->sender->create_time = date('Y-m-d H:i:s');
        });
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 根据where 条件查找单条记录当中$column字段的值
     *
     * @param array | string $where
     * @param string $column
     * @return mixed
     */
    public static function fetchFieldBy($where,$column)
    {
        if($model = static::findOne($where))
        {
            if(isset($model->$column))
                return $model->$column;
            return null;
        }
        return null;
    }

    /**
     * 根据where 条件查找单条记录当中$column字段的值
     *
     * @param array $where
     * @param array $columns
     * @param array | string $sort
     * @return array|BaseModel[]
     * @author by muisngs 2017/12/04
     */

    public static function fetchArray($where,$columns = '*', $sort = null)
    {
        $query = static::find()->select($columns)->where($where);
        if($sort){
            $query = $query->orderBy($sort);
        }

        return $query->asArray()->all();
    }

    /**
     * 根据条件取出数据库中一条数据以数组形式进行返回
     *
     * @param array | string $where
     * @param array | string $columns
     * @return array|null|ActiveRecord
     */

    public static function fetchOne($where,$columns = '*')
    {
        return static::find()->select($columns)->where($where)->asArray()->one();
    }


    /**
     * 获取表中下一个自增id
     *
     * @return mixed
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\db\Exception
     */

    public static function getAutoIncrementId()
    {
        $table = static::getTableSchema()->fullName;
        $sql   = 'SHOW TABLE STATUS LIKE "' . $table . '"';
        return \Yii::$app->getDb()->createCommand($sql)->queryOne()['Auto_increment'];
    }

    /**
     * 重写afterValidate方法，加入对于EVENT_AFTER_VALIDATE的响应，
     * 在其中加了日志操作。
     */
    public function afterValidate()
    {
        $this->on(self::EVENT_AFTER_VALIDATE, function ($event) {
            /**
             * @var \yii\base\Model $model
             */
            $model = $event->sender;
            if ($model->hasErrors()) {
                // 记录日志
                //get_logger()->log($model->getErrors(), Logger::LEVEL_ERROR);
            }
        });
        parent::afterValidate();
    }

    /**
     * 返回所有错误，将其转为字符串
     *
     * @param null $attribute
     * @param string $eol 换行符
     * @return string
     */
    public function getErrorsStr($attribute = null, $eol = '<br>') {
        $errors = parent::getErrors($attribute);
        // 将错误信息转成字符串
        $message = '';
        if (!empty($errors)) {
            $attrs = $this->attributeLabels();
            if (is_null($attribute)) {
                foreach ($errors as $k => $val) {
                    $message .= ($attrs[$k].':'.$eol);
                    $tmp = array_map(function ($item) {return '&nbsp;&nbsp;-'.$item;}, $val);
                    $message .= implode($eol, $tmp);
                }
            } else {
                $message .= ($attrs[$attribute].':'.$eol);
                $message .= implode($eol, $errors);
            }
        }
        return $message;
    }

    /**
     * @param string $attribute
     * @return string
     */
    public function getFirstError($attribute = null)
    {
        $errors = parent::getErrors($attribute);
        return current($errors)[0];
    }

    /**
     * 返回最后一个错误
     *
     * @param null $attribute
     * @return string
     */
    public function getLastErrorStr($attribute = null) {
        $errors = parent::getErrors($attribute);
        if (is_null($attribute)) {
            return !empty($errors) ? array_pop(array_pop($errors)) : '';
        } else {
            return !empty($errors) ? array_pop($errors) : '';
        }
    }

    /**
     * 插入数据
     *
     * @param array $data 数据集
     * @return BaseModel
     * @throws UserException
     */
    public static function insertChunk($data) {
        $model = new static();
        foreach ($data as $field => $value) {
            $model->$field = $value;
        }
        if (!$model->save()) {
            throw new UserException($model->getFirstError(), 510);
        }
        return $model;
    }

    /**
     * 更新数据
     *
     * @param array $data 数据集
     * @return void
     * @throws UserException
     */
    public function updateChunk($data) {
        foreach ($data as $field => $value) {
            $this->$field = $value;
        }
        if (!$this->save()) {
            throw new UserException($this->getErrorsStr(), 510);
        }
    }


}
<?php

/**
 * Created by PhpStorm.
 * User: zzr
 * Date: 2018/8/20
 * Time: 9:25
 */

namespace passenger\modules\order\controllers;

use common\controllers\BaseController;
use common\controllers\ClientBaseController;
use common\logic\ChargeRuleTrait;
use common\logic\CouponTrait;
use common\logic\HttpTrait;
use common\logic\order\CharterCarInfo;
use common\logic\Passenger;
use common\logic\ServiceLogic;
use common\logic\TagRuleLogic;
use common\logic\ValuationLogic;
use common\models\CarLevel;
use common\models\OrderUseCoupon;
use common\services\CConstant;
use common\services\traits\PublicMethodTrait;
use common\services\YesinCarHttpClient;
use common\util\Common;
use common\util\Json;
use passenger\models\OrderRulePrice;
use passenger\models\OrderRulePriceDetail;
use passenger\models\OrderRulePriceTagPassenger;
use passenger\models\PassengerHistoryAddress;
use passenger\models\PassengerHistoryCarPerson;
use passenger\services\CheckParamsAuthTrait;
use passenger\services\FenceTrait;
use passenger\services\filters\OrderForecastDataFilter;
use passenger\services\OrderCountTrait;
use yii\base\UserException;
use yii\helpers\ArrayHelper;

class InitController extends ClientBaseController
{
    use PublicMethodTrait, ChargeRuleTrait, OrderCountTrait, CouponTrait,CheckParamsAuthTrait,HttpTrait,FenceTrait;

    private $_params;

    const GET_ON_ADDRESS = 1;
    const GET_OFF_ADDRESS = 2;

    /**
     * init
     */
    public function init()
    {
        $this->_params = \Yii::$app->params;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return Json::success();
    }


    /**
     * 获取当前用户当前户订单(立即, 预约)  订单数量 未支付订单
     *
     * @return array
     */
    public function actionGetOrderCount()
    {
        $passengerId = $this->userInfo['id'];
        \Yii::info('当前用户为id为' . $passengerId);
        $realTimeOrderIds = $this->getOrderIdsByServiceTypeId($passengerId, CConstant::SERVICE_TYPE_REAL_TIME);
        $reserveOrderIds = $this->getOrderIdsByServiceTypeId($passengerId, CConstant::SERVICE_TYPE_RESERVE);
        $unpaidOrderIds = $this->getUnpaidOrderIds($passengerId);
        $orderStatistics = compact('realTimeOrderIds', 'reserveOrderIds', 'unpaidOrderIds');

        return Json::success($orderStatistics);
    }

    /**
     * 获取包车的时间段
     *
     * @return array|\yii\web\Response
     */

    public function actionGetCharterCarTimePhase()
    {
        $request = $this->getRequest();
        $city_code = $request->post('cityCode', '010');
        $car_list = $this->getChargeRuleCarLevel($city_code, [5, 6]);
        
        $data = [5 => ['service_type' => 5, 'message' => '%d小时(含%d公里)'], 6 => ['service_type' => 6, 'message' => '%d小时(含%d公里)']];
        if (empty($car_list)) {
            $rule_list = [
                ['service_type_id' => 5, 'base_minutes' => 240, 'base_kilo' => 0],
                ['service_type_id' => 6, 'base_minutes' => 480, 'base_kilo' => 0],
            ];
        } else {
            $rule_list = $this->getChargeRuleList($city_code, [5, 6], $car_list[0]);
        }

        $rule_list = array_column($rule_list, null, 'service_type_id');

        foreach ($data as $_k => $_v) {
            if (isset($rule_list[$_k])) {
                $hour = (int)($rule_list[$_k]['base_minutes'] / 60);
                $kilo = (int)$rule_list[$_k]['base_kilo'];
            } else {
                if ($_k == 5) {
                    $hour = 4;
                    $kilo = 0;
                } elseif ($_k == 6) {
                    $hour = 8;
                    $kilo = 0;
                }
            }
            $data[$_k]['message'] = vsprintf($_v['message'], [$hour, $kilo]);
        }
        return Json::success($this->keyMod(array_values($data)));
    }


    /**
     * 1.城市服务类型 是否开通
     * 2.是否有未支付的订单
     *
     * @return array
     */

    /**
     * @return array|mixed
     * @throws \Throwable
     */
    public function actionInitCheck()
    {
        $request = $this->getRequest();
        $cityCode = $request->post('cityCode', '010');
        $serviceType = $request->post('serviceType');
        try {
            if (empty($cityCode) || empty($serviceType)) {
                throw new UserException('Params error!');
            }
            $canService = ServiceLogic::serviceStatus($cityCode, $serviceType);
            if (!$canService) {
                throw new UserException('服务未开通!', 1001);
            }
            $passenger = new Passenger($this->userInfo['id']);
            if ($passenger->hasUnpaidOrder()) {
                throw new UserException('你有未付的订单!', 1002);
            }

            return Json::success();
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Throwable $exception) {
            \Yii::error($exception->getMessage());
            throw $exception;
        }

    }

    /**
     *  叫车前需要进行前置 条件检查
     *  1.是否有可服务的司机
     * 2.触发黑名单账户规则,查看用户是否在黑名单中
     * 3.相同类型订单数量限制
     */

    /**
     * @return array|mixed|\yii\web\Response
     * @throws \yii\base\InvalidConfigException
     */
    public function actionForecastFee()
    {
        $request = $this->getRequest();
        $withOrderId = $request->post('withOrderId', 0);
        \Yii::info($withOrderId, 'with_order_id');
        $server = ArrayHelper::getValue($this->_params, 'api.order.serverName');
        $methodPath = ArrayHelper::getValue($this->_params, 'api.order.method.forecastFee');
        try {
            if ($withOrderId == 0) {
                $data = $request->post();

                $orderFilterModel = new OrderForecastDataFilter();
                $orderFilterModel->attributes = $data;
                if(!$orderFilterModel->validate()){
                    throw  new  UserException(current($orderFilterModel->getFirstErrors()),1000);
                }
                $data = $orderFilterModel->toArray();
                \Yii::info($data,'forecast-fee');

                if(isset($data['startLongitude'],$data['startLatitude'],$data['meId']) &&
                    $this->checkFenceStatus($data['cityCode'])
                ){
                    //围栏检测
                    $this->_checkFence($data['startLongitude'],$data['startLatitude'],$data['meId']);
                }
                $data['passengerInfoId'] = $this->userInfo['id'];
                $data['passengerPhone'] = $this->userInfo['phone'];
            } elseif($withOrderId == 1) {
                $orderId = (int)$request->post('orderId');
                $carLevelId = (int)$request->post('carLevelId');
                /************1201 预估费加入用户标签选项*******************/
                $userFeature = $request->post('userFeature', '');
                /******************end 1201***************************/
                $data = [
                    'orderId' => $orderId,
                    'carLevelId' => $carLevelId,
                    'userFeature' => $userFeature,  //1201
                ];
                \Yii::info($data,'forecast-fee-with-user-feature');
            }else{
                throw new UserException('Param `withOrder` error!',998);
            }
            if(isset($orderId)){
                if(!$this->checkOrderIdBelongToUser($this->userInfo['id'],$orderId)){
                    throw new UserException('Order id not belong to user',999);
                }
            }
            $httpClient = new YesinCarHttpClient(['serverURI' => $server]);
            $responseData = $httpClient->post($methodPath, $data);
            if (isset($responseData['code']) && $responseData['code'] == 0) {
                if (!isset($orderId)) {
                    $orderId = $responseData['data']['orderId'];
                }
                /*$fixOrderCastFlag = $this->_fixOrderCost($orderId); //调用java接口将预估费用写入数据库(临时使用 优化代码时添加)
                if(!$fixOrderCastFlag){
                    throw new UserException('Failed to fix order cost!',1000);
                }*/
                $couponObject = $this->_handleOrderCoupon($this->userInfo['id'], $orderId);
                /**
                 * @var \stdClass $couponObject
                 */
                $responseData['data']['coupon'] = $couponObject->maxAmount;
                \Yii::info($couponObject, 'my_coupons');
                if ($couponObject->maxAmount !== 0) {
                    $responseData['data']['price'] = (string)$responseData['data']['price'] - (string)$couponObject->maxAmount;
                    if ($responseData['data']['price'] < 0) {
                        $responseData['data']['price'] = '0.00';
                    } else {
                        $responseData['data']['price'] = strval(round($responseData['data']['price'], 2));
                    }
                    \Yii::info($responseData['data']['price'], 'price');
                    //userCouponId
                    $orderUseCouponTable = OrderUseCoupon::findOne(['order_id' => $orderId]); //订单是否使用了优惠券
                    if (!$orderUseCouponTable) {
                        $orderUseCouponTable = new OrderUseCoupon();
                        $orderUseCouponTable->setAttributes([
                            'order_id' => $orderId,
                            'coupon_id' => $couponObject->userCouponId,
                            'coupon_money' => $couponObject->maxAmount,
                            'after_use_coupon_moeny' => $responseData['data']['price']
                        ]);
                        $orderUseCouponTable->save();
                    } else {
                        $orderUseCouponTable->updateAttributes([
                            'coupon_id' => $couponObject->userCouponId,
                            'coupon_money' => $couponObject->maxAmount,
                            'after_use_coupon_moeny' => $responseData['data']['price']
                        ]);
                    }
                }
                $dynamicDiscountRate = OrderRulePrice::fetchFieldBy(
                    [
                        'order_id' => $responseData['data']['orderId'],
                        'category' => OrderRulePrice::PRICE_TYPE_FORECAST,
                    ],
                    'dynamic_discount_rate'
                );
                if (!empty($dynamicDiscountRate)) {
                    $responseData['data']['dynamicDiscountRate'] = $dynamicDiscountRate;
                } else {
                    $responseData['data']['dynamicDiscountRate'] = '';
                }
                return Json::success($responseData['data']);
            } else {
                \Yii::error($responseData['message']);
                return $this->asJson([
                    'code' => Common::ERROR_CODE,
                    'message' => 'error!',
                ]);
            }
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Exception $exception){
            \Yii::error($exception->getMessage(),'forecast-fee');
        }

    }

    /**
     * 获取可用的优惠券
     *
     * @param $userId
     * @param $orderId
     * @return \stdClass
     */

    private function _handleOrderCoupon($userId, $orderId)
    {
        return $this->getOrderMaxCoupon($userId, $orderId);
    }

    /**
     * 预估费详情
     *
     * @return array
     */


    public function actionCalcForecastCostDetail()
    {

        $orderId = $this->getRequest()->post('orderId');
        if(!$this->checkOrderIdBelongToUser($this->userInfo['id'],$orderId)){
                return Json::error([],1,'Order id not belong to user');
        }
        $costDetail = OrderRulePrice::fetchOne([
            'order_id' => $orderId,
            'category' => OrderRulePrice::PRICE_TYPE_FORECAST
        ], [
            'total_price', //总金额
            'path_price', //里程费,
            'path',//总里程，
            'duration',//总时长,
            'duration_price',//时长费
            'supplement_price',//基础补足费,
            'beyond_price',//远途费
            'beyond_distance',//远途公里数,
            'night_price',//夜间服务费,
            'night_time',//夜里总时长,
            'night_distance',//夜间总公里数
            'rest_distance',//其他时段公里数
            'rest_distance_price',//共他时段公里数价格,
            'rest_duration',//其他时段 时长,
            'rest_duration_price',//其他时段时长费,
            'dynamic_discount_rate',//动态调价折扣率,
            'base_price',//起步费
        ]);
        $periodRule = OrderRulePriceDetail::fetchArray(
            ['order_id' => $orderId, 'category' => OrderRulePriceDetail::CATEGORY_FORECAST],
            [
                'start_hour',// 时段开始
                'end_hour',//时段结束,
                'distance',//时段公里数,
                'distance_price',//时段公里数 费用
                'duration',//时段时长
                'time_price',//时长费用
            ]
        );
        /******************1201 加入用户特征标签费用***********************************/
        $tagRule = OrderRulePriceTagPassenger::fetchArray(
            ['order_id' => $orderId, 'category' => CConstant::TYPE_FORECAST_ORDER],
            [
                'tagRuleId' => 'id',
                'tag_name',
                'tag_price',
            ]
        );
        /**********************end 1201**********************************************/
        $priceForCalcCoupon = isset($costDetail['total_price']) ? $costDetail['total_price'] : '0'; // 用于计算订单优惠券
        $couponObject = $this->_handleOrderCoupon($this->userInfo['id'], $orderId);
        /**@var \stdClass $couponObject */
        $costDetail['coupon'] = (string)$couponObject->maxAmount;
        $costDetail['total_price'] = (string)($costDetail['total_price'] - (string)$couponObject->maxAmount);
        $costDetail['periodRule'] = $periodRule;
        $costDetail['tagRule'] = $tagRule;//1201 加入用户特征标签费用
        return Json::success(Common::key2lowerCamel($costDetail));
    }

    /**
     * get car level
    /**
     * @return array
     * @throws UserException
     */

    public function actionGetCarLevel_1()
    {
        $carLevel = CarLevel::fetchArray(['enable' => 1], [
            'carLevelId' => 'id',
            'configDesc' => 'label',
            'image' => 'icon',
        ]);
        return Json::success(['list' => $carLevel]);
    }

    /**
     * @return array|mixed
     */
    public function actionGetCarLevel()
    {
        $request = $this->getRequest();
        $cityCode = $request->post('cityCode');
        $serviceType = $request->post('serviceType');
        $ossUrl = \Yii::$app->params['ossFileUrl'];

        try {
            if (empty($cityCode) || empty($serviceType)) {
                throw new \RuntimeException('Params error!', 1001);
            }
            $service = ValuationLogic::getAllNowRuleInfoByCityCode($cityCode, CConstant::CHANNEL_CODE_SELF);
            if (empty($service)) {
                throw new \RuntimeException('No available car level', 1002);
            }
            $carLevel = [];
            foreach ($service as $k => $v) {
                if ($v['service_type_id'] == $serviceType) {
                    $carLevel[$k]['carLevelId'] = $v['car_level_id'];
                    $carLevel[$k]['configDesc'] = $v['car_level_name'];
                    $carLevel[$k]['image'] = $ossUrl . $v['car_level_icon'];
                }
            }
            if (empty($carLevel)) {
                throw new \RuntimeException('No available car-level!', 1003);
            }

            return Json::success(['list' => array_values($carLevel)]);
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Throwable $exception) {
            \Yii::error($exception->getMessage());
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }
    }

    /**
     * @return array|mixed
     */
    public function actionGetCarLevelAfter()
    {
        $request = $this->getRequest();
        $cityCode = $request->post('cityCode');
        $serviceType = $request->post('serviceType');
        $ossUrl = \Yii::$app->params['ossFileUrl'];

        try {
            if (empty($cityCode)) {
                throw new UserException('Params error!', 1001);
            }
            $service = ValuationLogic::getAllNowRuleInfoByCityCode($cityCode, CConstant::CHANNEL_CODE_SELF);
            if (empty($service)) {
                throw new UserException('No available car level', 1002);
            }
            $carLevel = [];
            foreach ($service as $k => $v) {
                $carLevel[$k]['serviceTypeId'] = $v['service_type_id'];
                $carLevel[$k]['carLevelId'] = $v['car_level_id'];
                $carLevel[$k]['configDesc'] = $v['car_level_name'];
                $carLevel[$k]['image'] = $ossUrl . $v['car_level_icon'];
            }
            if (empty($carLevel)) {
                throw new UserException('No available car-level!', 1003);
            }
            $carLevel = ArrayHelper::index(array_values($carLevel), null, ['serviceTypeId']);

            return Json::success(['list' => $carLevel]);
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Throwable $exception) {
            \Yii::error($exception->getMessage());
        }
    }

    /**
     * @return array|\yii\web\Response
     */

    public function actionGetHistoryPlace()
    {
        $request = $this->getRequest();
        //$passengerId = (int)$request->post('uid', 1);
        $passengerId = $this->userInfo['id'];
        $addressType = (int)$request->post('type', 1);
        $moduleParams = $this->module->params;
        $limit = ($addressType == self::GET_ON_ADDRESS) ?
            $moduleParams['getOnAddressCount'] :
            $moduleParams['getOffAddressCount'];
        $response = PassengerHistoryAddress::find()
            ->select([
                'id',
                'address',
                'longitude',
                'latitude',
                'city',
                'cityCode' => 'city_code',
                'name' => 'detail_name',
                'adCode' => 'ad_code'
            ])
            ->where(['passenger_info_id' => $passengerId, 'type' => $addressType, 'is_del' => PassengerHistoryAddress::DEL_NO])
            ->limit($limit)
            ->orderBy('id desc')
            ->asArray()
            ->all();
        if ($response) {
            return Json::success($response);
        } else {
            return $this->asJson([
                'code' => Common::ERROR_CODE,
                'message' => 'cannot find any address!',
            ]);
        }

    }

    /**
     * @return array
     */

    public function actionGetHistoryCarPerson()
    {
        $request = $this->getRequest();
        $user_id = $this->userInfo['id'];
        $data = PassengerHistoryCarPerson::fetchArray(
            ['passenger_info_id' => $user_id, 'is_del' => PassengerHistoryCarPerson::DEL_NO],
            [
                'id' => 'id',
                'username' => 'use_car_person_name',
                'phoneNum' => 'use_car_person_phone',
            ]
        );
        if (empty($data)) {
            return Json::error('', 1, 'cannot find any data');
        }
        return Json::success($data);
    }

    /**
     * @return array|mixed
     */
    public function actionGetPricingRule()
    {
        $request = $this->getRequest();
        $cityCode = $request->post('cityCode');
        $channel_id = CConstant::CHANNEL_CODE_SELF;
        try {
            if (empty($cityCode)) {
                throw new UserException('Params error!');
            }
            $chargeRuleData = ValuationLogic::getAllNowRuleInfoByCityCode($cityCode, $channel_id);
            $chargeRuleData = ArrayHelper::index($chargeRuleData, null, 'service_type_id');
            $chargeRuleData = array_values($chargeRuleData);

            foreach ($chargeRuleData as &$v) {
                $item = $v;
                $v = [];
                $v['name'] = $item[0]['service_type_name'];
                $v['list'] = $item;
            }

            return Json::success($chargeRuleData);
        } catch (\yii\base\Exception $exception) {
            return $this->renderErrorJson($exception);
        }

    }


    /**
     * @return array
     * @throws UserException
     */
    public function actionGetServiceType()
    {
        $cityCode = $this->getRequest()->post('cityCode');
        $service = ServiceLogic::getServiceType($cityCode);
        $service = Common::key2lowerCamel($service);
        return Json::success(['list' => $service]);
    }

    /**
     * * 获取用户特征标签
     *
     * @return array
     */

    public function actionGetUserTag()
    {
        $request     = $this->getRequest();
        $cityCode    = $request->post('cityCode');
        $serviceType = $request->post('serviceType');
        try {
            if (empty($cityCode) || empty($serviceType)) {
                throw new UserException('Params error!',1001);
            }
            $tagsInfo = TagRuleLogic::getTagRuleInfo($cityCode, $serviceType);
            $tagsInfo = Common::key2lowerCamel($tagsInfo);
            $tagsInfo = Common::getCertainColumnFromTowDimensionalArray($tagsInfo, ['tagId', 'tagName', 'tagDesc']);
            $tagsInfo = Common::arraySortByKey($tagsInfo, 'tagId', 'asc');

            return Json::success(['list' => $tagsInfo]);
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Exception $exception) {
            \Yii::error($exception->getMessage(), 'get-user-tag');
        }
    }

    /**
     * 调用java接口将订单费用写入数据库中
     *
     * @param int $orderId
     * @return bool
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */
    private function _fixOrderCost($orderId)
    {
        if (empty($orderId)) {
            throw new UserException('Params error!', 1001);
        }
        $server = ArrayHelper::getValue(\Yii::$app->params, 'api.valuation');
        $methodRoute = $server['method']['fixForecastCost'] . '/' . $orderId;
        $client = new YesinCarHttpClient(['serverURI' => $server['serverName']]);
        $result = $client->get($methodRoute, [], 0);
        if (isset($result['code']) && $result['code'] == 0) {
            return true;
        }

        return false;
    }


    /**
     * @param $longitude
     * @param $latitude
     * @param $diu
     * @throws UserException
     */

    private function _checkFence($longitude,$latitude,$diu)
    {
        $reqParams = compact('longitude','latitude','diu');
        $result    = self::httpGet('map.inFence', $reqParams);
        if(isset($result['data']['inFence']) && $result['data']['inFence'] === false){
            throw new UserException('抱歉，上车地点不在可服务范围!',999);
        }
    }



    /**
     * test
     */
    public function actionTest()
    {
    }



}
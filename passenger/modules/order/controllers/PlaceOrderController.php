<?php
/**
 * Created by PhpStorm.
 * User: zzr
 * Date: 2018/8/20
 * Time: 9:25
 */

namespace passenger\modules\order\controllers;

use common\controllers\BaseController;
use common\controllers\ClientBaseController;
use common\logic\blacklist\BlacklistDashboard;
use common\logic\CouponTrait;
use common\logic\finance\Wallet;
use common\logic\FlightLogic;
use common\logic\HttpTrait;
use common\logic\order\CommonOrder;
use common\logic\order\OrderTrajectoryTrait;
use common\logic\order\UnfreezeBalanceTrait;
use common\logic\ServiceLogic;
use common\models\DriverInfo;
use common\models\OrderUseCoupon;
use common\models\PassengerWallet;
use common\services\CConstant;
use common\services\XEncode;
use passenger\models\Ads;
use passenger\models\EvaluateDriver;
use passenger\models\Order;
use passenger\models\OrderCancelRecord;
use common\services\traits\PublicMethodTrait;
use common\services\YesinCarHttpClient;
use common\util\Common;
use common\util\Json;
use passenger\models\OrderRulePrice;
use passenger\models\PassengerHistoryAddress;
use passenger\models\PassengerHistoryCarPerson;
use passenger\models\PassengerInfo;
use passenger\services\CheckParamsAuthTrait;
use passenger\services\OrderCountTrait;
use yii\base\InvalidArgumentException;
use yii\base\InvalidConfigException;
use yii\base\InvalidValueException;
use yii\base\UserException;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

class PlaceOrderController extends ClientBaseController
{
    use PublicMethodTrait, OrderTrajectoryTrait, OrderCountTrait, CouponTrait, HttpTrait, CheckParamsAuthTrait, UnfreezeBalanceTrait;

    private $_params;

    const GET_ON_ADDRESS = 1;
    const GET_OFF_ADDRESS = 2;


    const SHOW_CAR_PERSON_COUNT = 3;
    const EVENT_BEFORE_CALLING_CAR = 'beforeCallingCar';
    const EVENT_AFTER_CALLING_CAR = 'afterCallingCar';

    public function init()
    {
        $this->_params = \Yii::$app->params;
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $action
     * @return bool
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $this->on(self::EVENT_AFTER_CALLING_CAR, [
            \passenger\modules\order\listeners\CallingCarListener::className(),
            'updateLastCallingCarTime'
        ],
            ['userId' => $this->userInfo['id']]
        );

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return Json::success();
    }


    /**
     * 叫车前需要进行前置 条件检查
     * 1.是否有可服务的司机
     * 2.计价规则是否有变
     * 2.触发黑名单账户规则,查看用户是否在黑名单中
     * 3.相同类型订单数量限制
     */
    /**
     * @param $orderId
     * @param $riskLimit
     * @param CommonOrder $commonOrder
     * @throws UserException
     */
    private function _orderCheckBeforeCallingCar($orderId,$riskLimit,CommonOrder $commonOrder)
    {
        $userId         = $this->userInfo['id'];
        $phone          = $this->userInfo['phone'];
        $unpaidOrderIds = $this->getUnpaidOrderIds($userId); //有未付的定单无法叫车
        if (count($unpaidOrderIds) != 0) {
            throw new UserException('您有未支付的订单,请支付完成后再叫车!', 1000);
        }
        //$userId = 187;//乘客id
        //$orderTable = Order::findOne($orderId);
        \Yii::info($commonOrder->getDeviceCode(),'device-code');
        $phoneDeviceCode = $commonOrder->getDeviceCode();
        //var_dump($phoneDeviceCode);exit;
        $deviceType       = (strtolower($commonOrder->getDeviceSource()) == 'ios') ? 2 : 1;
        $blackPhoneReturn = BlacklistDashboard::checkBlacklist($phone);
        if ($blackPhoneReturn == 1001) {
            throw new UserException('暂无可用车辆,请稍候重试', 1001);
        }
        if ($blackPhoneReturn == 1002) {
            throw new UserException('对不起,暂无可用车辆', 1002);
        }
        $blackDeviceReturn = BlacklistDashboard::checkDeviceBlacklist($phoneDeviceCode, $deviceType);
        if ($blackDeviceReturn == 1002) {
            $blackListPhoneArray = BlacklistDashboard::$deviceMes;
            /**
             * @var  array $blackListPhoneArray
             */
            $blackListPhoneArray = array_map(function ($v) {
                return '账号' . $v;
            }, $blackListPhoneArray);
            $blackListPhoneStr   = '由于"' . implode(',', $blackListPhoneArray) . '"在该设备有未支付的订单，请确认支付后重试';
            throw new UserException($blackListPhoneStr, 1003);
        }
        $balance = PassengerWallet::find()->select([
            'balance' => new Expression('sum(`capital` + `give_fee`)')
        ])->where(['passenger_info_id' => $userId])->asArray()->one();
        if (!empty($balance)) {
            $balance = $balance['balance'];
        } else {
            $balance = '0.00';
        } // 当前用户余额
        \Yii::info($balance);

        //$OrderRulePriceTable    = OrderRulePrice::findOne(['order_id' => $orderId, 'category' => 0]);
        //$couponReduce = OrderUseCoupon::fetchFieldBy(['order_id'=>$orderId],'coupon_money'); //优惠券减免金额
        //$orderForecastPrice = $OrderRulePriceTable->total_price;   //定单价格
        //$commonOrder        = new CommonOrder($orderId);
        $orderForecastPrice = $commonOrder->forecastCost;//订单预估费用
        $cityCode           = $commonOrder->cityCode;
        $srvType            = (int)$commonOrder->getOrderRecord()->service_type;
        //$srvName = ($srvType == 1)?'实时单':'预约单';
        $srvName = [
            CConstant::SERVICE_TYPE_REAL_TIME => '实时单',
            CConstant::SERVICE_TYPE_RESERVE => '预约单',
            CConstant::SERVICE_AIRPORT_PICK_UP => '接机单',
            CConstant::SERVICE_AIRPORT_DROP_OFF => '送机单',
            CConstant::SERVICE_CHARTER_CAR_HALF_DAY => '包车单',
            CConstant::SERVICE_CHARTER_CAR_FULL_DAY => '包车单'
        ];
        //$srvType                = 2;
        $currentOrderCountLimit = ServiceLogic::serviceOrderNumber($cityCode, $srvType); // 当前城市指定服务类型 下单数量限制
        $orderIds               = $this->getOrderIdsByServiceTypeId($this->userInfo['id'], $srvType);
        $passengerOrderCount    = count($orderIds);
        if ($passengerOrderCount >= $currentOrderCountLimit) {
            throw new UserException('最多允许' . $currentOrderCountLimit . '单' . $srvName[$srvType], 1004);
        }
        //$riskTop              = (string)ServiceLogic::getOrderRiskTopByCityCode($cityCode); // 当前城市限额
        $passengerAllOrderIds = $this->getUserOrderIds($this->userInfo['id']);
        \Yii::info('所有订单列表');
        \Yii::info($passengerAllOrderIds);
        \Yii::info($orderForecastPrice . '----' . $riskLimit,'risk-limit');

        if ($orderForecastPrice >= $balance) { //预估价是否大于等于余额
            $margin = strval($orderForecastPrice - $balance); //差价
            if ($margin > $riskLimit) {
                throw new UserException('余额不足,请先充值,充值金额需大于' . $margin . '元。', 1005);
            } else {
                /*$orderUseCouponLessThanRiskIds  = OrderUseCoupon::find()
                    ->select('order_id')
                    ->where(['order_id' => $passengerAllOrderIds])
                    ->andWhere(['<=', 'after_use_coupon_moeny', $riskTop])
                    ->column();
                $passengerAllOrderIds           = array_values(array_diff($passengerAllOrderIds, $orderUseCouponLessThanRiskIds));
                $lessThanRiskTopOrderCount      = OrderRulePrice::find()//当前小于限额进行中订单数计算
                ->where(['order_id' => $passengerAllOrderIds])
                    ->andWhere(['<=', 'total_price', $riskTop])
                    ->count();
                $finalLessThanRiskTopOrderCount = count($orderUseCouponLessThanRiskIds) + $lessThanRiskTopOrderCount;*/
                $LessThanRiskTopOrderCount = $this->getLessThanRiskOrder($this->userInfo['id']);
                \Yii::info('当前小于限额进行中订单数' . $LessThanRiskTopOrderCount, 'LessThanRiskTopOrderCount');
                if ($LessThanRiskTopOrderCount >= 1) {
                    throw new UserException('余额不足,请先充值,充值金额需大于' . $margin . '元。', 1006);
                } else {
                    $orderTable = Order::findOne($orderId);
                    $orderTable->is_use_risk = 1;
                    $orderTable->save(false);
                }

            }
        }
    }

    /**
     * @param $orderId
     * @throws UserException
     */
    private function _orderCheckBeforeCallingCarBefore($orderId)
    {
        $userId         = $this->userInfo['id'];
        $phone          = $this->userInfo['phone'];
        $unpaidOrderIds = $this->getUnpaidOrderIds($userId); //有未付的定单无法叫车
        if (count($unpaidOrderIds) != 0) {
            throw new UserException('您有未支付的定单,请支付完成后再叫车!', 1000);
        }
        //$userId = 187;//乘客id
        $orderTable = Order::findOne($orderId);
        \Yii::info($orderTable->device_code);
        $phoneDeviceCode = $orderTable->device_code;
        //var_dump($phoneDeviceCode);exit;
        $deviceType       = (strtolower($orderTable->source) == 'ios') ? 2 : 1;
        $blackPhoneReturn = BlacklistDashboard::checkBlacklist($phone);
        if ($blackPhoneReturn == 1001) {
            throw new UserException('暂无可用车辆,请稍候重试', 1001);
        }
        if ($blackPhoneReturn == 1002) {
            throw new UserException('对不起,暂无可用车辆', 1002);
        }
        $blackDeviceReturn = BlacklistDashboard::checkDeviceBlacklist($phoneDeviceCode, $deviceType);
        if ($blackDeviceReturn == 1002) {
            $blackListPhoneArray = BlacklistDashboard::$deviceMes;
            /**
             * @var  array $blackListPhoneArray
             */
            $blackListPhoneArray = array_map(function ($v) {
                return '账号' . $v;
            }, $blackListPhoneArray);
            $blackListPhoneStr   = '由于"' . implode(',', $blackListPhoneArray) . '"在该设备有未支付的订单，请确认支付后重试';
            throw new UserException($blackListPhoneStr, 1003);
        }
        $balance = PassengerWallet::find()->select([
            'balance' => new Expression('sum(`capital` + `give_fee`)')
        ])->where(['passenger_info_id' => $userId])->asArray()->one();
        if (!empty($balance)) {
            $balance = $balance['balance'];
        } else {
            $balance = 0;
        } // 当前用户余额
        \Yii::info($balance);

        $OrderRulePriceTable = OrderRulePrice::findOne(['order_id' => $orderId, 'category' => 0]);
        $couponReduce        = OrderUseCoupon::fetchFieldBy(['order_id' => $orderId], 'coupon_money'); //优惠券减免金额
        $orderForecastPrice  = $OrderRulePriceTable->total_price;   //定单价格

        $cityCode = $OrderRulePriceTable->city_code;
        $srvType  = $orderTable->service_type;
        $srvName  = ($srvType == 1) ? '实时单' : '预约单';
        //$srvType                = 2;
        $currentOrderCountLimit = ServiceLogic::serviceOrderNumber($cityCode, $srvType); // 当前城市指定服务类型 下单数量限制
        $orderIds               = $this->getOrderIdsByServiceTypeId($this->userInfo['id'], $srvType);
        $passengerOrderCount    = count($orderIds);
        if ($passengerOrderCount >= $currentOrderCountLimit) {
            throw new UserException('最多允许' . $currentOrderCountLimit . '单' . $srvName, 1004);
        }
        $riskTop              = ServiceLogic::getOrderRiskTopByCityCode($cityCode); // 当前城市限额
        $passengerAllOrderIds = $this->getOrderIdsByServiceTypeId($this->userInfo['id'], 1) +
            $this->getOrderIdsByServiceTypeId($this->userInfo['id'], 2);
        \Yii::info('所有订单列表');
        \Yii::info($passengerAllOrderIds);
        \Yii::info($orderForecastPrice . '----' . $riskTop);

        if ($orderForecastPrice <= $riskTop) {  //订单价格小于当前城市限额
            $lessThanRiskTopOrderCount = OrderRulePrice::find()//当前小于限额进行中订单数
            ->where(['order_id' => $passengerAllOrderIds])
                ->andWhere(['<=', 'total_price', $riskTop])
                ->count();
            //var_dump($lessThanRiskTopOrderCount);
            \Yii::info('当前小于限额进行中订单数' . $lessThanRiskTopOrderCount);
            if ($lessThanRiskTopOrderCount >= 1) { // 当前小于限额进行中订单数 大于1
                \Yii::info('余额' . $balance . ',预估费' . $orderForecastPrice);
                if ($balance < $orderForecastPrice) { //余额小于预估价 提示允值
                    $margin = $orderForecastPrice - $balance; //差额
                    if (!empty($couponReduce)) {
                        $margin = $margin - $couponReduce;
                    }
                    if ($margin > 0) {
                        throw new UserException('余额不足,请先充值,充值金额需大于' . round($margin, 2) . '元。', 1005);
                    }
                }
            }

        } else {
            if ($balance < $orderForecastPrice) {
                $margin2 = $orderForecastPrice - $balance;
                if (!empty($couponReduce)) {
                    $margin2 = $margin2 - $couponReduce;
                }
                if ($margin2 > 0) {
                    throw new UserException('余额不足,请先充值,充值金额需大于' . round($margin2, 2) . '元。', 1006);
                }
            }
        }

    }

    /**
     * 叫车
     *
     * @return mixed|\yii\web\Response
     * @throws \yii\db\Exception
     */

    public function actionCallingCarBefore()
    {
        $request     = $this->getRequest();
        $orderId     = (int)$request->post('orderId');
        $orderType   = (int)$request->post('orderType');
        $otherName   = trim($request->post('otherName'));
        $otherPhone  = trim($request->post('otherPhone'));
        $userFeature = $request->post('userFeature');
        //$startAddressPoi = trim($request->post('startAddressPoi','A:Bs:永和宫'));
        //$endAddressPoi   = trim($request->post('endAddressPoi','和平里西桥一站'));
        $getOnAddArray  = $request->post('getOn');
        $getOffAddArray = $request->post('getOff');
        /**
         * name address city citycode adcode latitude longitude
         */
        try {
            if (!$this->checkOrderIdBelongToUser($this->userInfo['id'], $orderId)) {
                throw new UserException('Order id not belong to user', 999);
            }
            $this->_orderCheckBeforeCallingCar($orderId);
        } catch (UserException $exception) {
            \Yii::info($exception);
            return $this->renderErrorJson($exception);
        }

        $trans = $this->beginTransaction();
        try {
            if (empty($orderId) || empty($orderType)) {
                throw new UserException('Params error!', 1008);
            }
            /*************************************余额冻结功能*****************************/
            $yid = $this->userInfo['id'];
            //$yid = 200991;
            $price   = (int)OrderRulePrice::fetchFieldBy(['order_id' => $orderId, 'category' => OrderRulePrice::PRICE_TYPE_FORECAST], 'total_price');
            $balance = PassengerWallet::find()->select([
                'balance' => new Expression('sum(`capital` + `give_fee`)')
            ])->where(['passenger_info_id' => $yid])->asArray()->one();
            if (!empty($balance)) {
                $balance = $balance['balance'];
            } else {
                $balance = 0;
            } // 当前用户余额
            $freezePostData = compact('yid', 'price', 'orderId');
            $freezeResponse = $this->_FreezeBalance($freezePostData);
            /*if(!isset($freezeResponse['code']) || $freezeResponse['code']!=0){
                throw new UserException('余额不足,请先充值,充值金额需大于'.($price-$balance).'元。',1007);
            }*/
            /************************************余额*********************************************/
            $this->trigger(self::EVENT_BEFORE_CALLING_CAR);
            $dataCallCar = compact('orderId', 'orderType', 'otherName', 'otherPhone', 'userFeature');
            $dataCallCar = array_filter($dataCallCar, function ($v) {
                return !empty($v);
            });
            if ($orderType == Order::ORDER_FOR_OTHER) {
                $passengerHistoryCarPersonTable = PassengerHistoryCarPerson::findOne([
                    'passenger_info_id' => $this->userInfo['id'],
                    'use_car_person_phone' => $otherPhone,
                ]);
                if (!$passengerHistoryCarPersonTable) {
                    PassengerHistoryCarPerson::insertChunk([
                        'passenger_info_id' => $this->userInfo['id'],
                        'passenger_phone' => $this->userInfo['phone'],
                        'use_car_person_name' => $otherName,
                        'use_car_person_phone' => $otherPhone,
                    ]);
                }
            }
            if (!empty($getOnAddArray)) {
                $addressArray                 = $this->_getPassengerAddress($getOnAddArray);
                $passengerHistoryAddressStart = PassengerHistoryAddress::findOne([
                    'passenger_info_id' => $this->userInfo['id'],
                    'address' => $addressArray['address'],
                    'detail_name' => $addressArray['detail_name'],
                    'type' => PassengerHistoryAddress::TYPE_GET_ON,
                ]);
                if (!$passengerHistoryAddressStart) {
                    $insertSetAddressStart = ArrayHelper::merge([
                        'passenger_info_id' => $this->userInfo['id'],
                        'passenger_phone' => $this->userInfo['phone'],
                        'type' => PassengerHistoryAddress::TYPE_GET_ON,
                    ], $addressArray);
                    \Yii::info($insertSetAddressStart);
                    PassengerHistoryAddress::insertChunk($insertSetAddressStart);
                }
            }
            if (!empty($getOffAddArray)) {
                $addressArray               = $this->_getPassengerAddress($getOffAddArray);
                $passengerHistoryAddressEnd = PassengerHistoryAddress::findOne([
                    'passenger_info_id' => $this->userInfo['id'],
                    'address' => $addressArray['address'],
                    'detail_name' => $addressArray['detail_name'],
                    'type' => PassengerHistoryAddress::TYPE_GET_OFF
                ]);
                if (!$passengerHistoryAddressEnd) { //
                    $insertSetAddressEnd = ArrayHelper::merge([
                        'passenger_info_id' => $this->userInfo['id'],
                        'passenger_phone' => $this->userInfo['phone'],
                        'type' => PassengerHistoryAddress::TYPE_GET_OFF,
                    ], $addressArray);
                    \Yii::info($insertSetAddressEnd);
                    PassengerHistoryAddress::insertChunk($insertSetAddressEnd);
                }
            }
            $data              = ['orderId' => $orderId];
            $serverOrder       = ArrayHelper::getValue($this->_params, 'api.order.serverName');
            $methodCallCar     = ArrayHelper::getValue($this->_params, 'api.order.method.callingCar');
            $httpClientOrder   = new YesinCarHttpClient(['serverURI' => $serverOrder]);
            $responseOrderData = $httpClientOrder->post($methodCallCar, $dataCallCar);
            /**
             * @var \yii\httpclient\Response $response
             */
            if (isset($responseOrderData['code']) && $responseOrderData['code'] == Common::SUCCESS_CODE) {
                $serverDispatch       = ArrayHelper::getValue($this->_params, 'api.dispatch.serverName');
                $methodDispatch       = ArrayHelper::getValue($this->_params, 'api.dispatch.method.dispatchOrder');
                $httpClientDispatch   = new YesinCarHttpClient(['serverURI' => $serverDispatch]);
                $responseDispatchData = $httpClientDispatch->post($methodDispatch, $data);
                if (isset($responseDispatchData['code']) && $responseDispatchData['code'] == Common::SUCCESS_CODE) {
                    $this->trigger(self::EVENT_AFTER_CALLING_CAR);
                    $this->lockOrderCoupon($orderId);// 绑定优惠券 on 2018-11-1
                    $trans->commit();
                    return $this->asJson(['code' => Common::SUCCESS_CODE, 'message' => 'success',]);
                } else {
                    $trans->rollBack();
                    if (isset($responseDispatchData['message'])) {
                        \Yii::error($responseDispatchData['message']);
                    }
                    return $this->asJson(['code' => Common::ERROR_CODE, 'message' => 'Failed calling car !']);
                }
            } else {
                $trans->rollBack();
                if (isset($responseOrderData['message'])) {
                    \Yii::error($responseOrderData['message']);
                }
                if (isset($responseOrderData['code']) && $responseOrderData['code'] == 500) {
                    $msg = '服务器内部错误!';
                } else {
                    $msg = $responseOrderData['message'];
                }
                return $this->asJson(['code' => Common::ERROR_CODE, 'message' => $msg]);
            }
        } catch (UserException $exception) {
            $trans->rollBack();
            \Yii::info($exception->getMessage());
            return $this->renderErrorJson($exception);
        } catch (\Throwable $ex) {
            $trans->rollBack();
            \Yii::info($ex->getMessage());
        }
    }

    /**
     * 冻结余额功能
     *
     * @param $freezeData
     * @return array|mixed
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _FreezeBalance($freezeData)
    {
        $server     = ArrayHelper::getValue(\Yii::$app->params, 'api.pay');
        $httpClient = new YesinCarHttpClient(['serverURI' => $server['serverName']]);
        $response   = $httpClient->post($server['method']['freeze'], $freezeData);
        return $response;
    }

    /**
     * 处理客户端发送的上下车地点，用于记录历上下车地点
     *
     * @param $addressArray
     * @return array
     */

    private function _getPassengerAddress($addressArray)
    {
        $address     = trim(ArrayHelper::getValue($addressArray, 'address', ''));
        $city_code   = ArrayHelper::getValue($addressArray, 'cityCode', '');
        $city        = ArrayHelper::getValue($addressArray, 'city', '');
        $detail_name = trim(ArrayHelper::getValue($addressArray, 'name', ''));
        $ad_code     = ArrayHelper::getValue($addressArray, 'adCode', '');
        $longitude   = ArrayHelper::getValue($addressArray, 'longitude', '');
        $latitude    = ArrayHelper::getValue($addressArray, 'latitude', '');
        return compact('address', 'city_code', 'city', 'detail_name', 'ad_code', 'longitude', 'latitude');
    }

    /**
     * record History get on/off Place
     *
     * @param $getOnAddArray
     * @param $getOffAddArray
     * @throws UserException
     */

    private function _recordHistoryPlace($getOnAddArray, $getOffAddArray)
    {
        if (!empty($getOnAddArray)) {
            $addressArray                 = $this->_getPassengerAddress($getOnAddArray);
            $passengerHistoryAddressStart = PassengerHistoryAddress::findOne([
                'passenger_info_id' => $this->userInfo['id'],
                'address' => $addressArray['address'],
                'detail_name' => $addressArray['detail_name'],
                'type' => PassengerHistoryAddress::TYPE_GET_ON,
            ]);
            if (!$passengerHistoryAddressStart) {
                $insertSetAddressStart = ArrayHelper::merge([
                    'passenger_info_id' => $this->userInfo['id'],
                    'passenger_phone' => $this->userInfo['phone'],
                    'type' => PassengerHistoryAddress::TYPE_GET_ON,
                ], $addressArray);
                \Yii::info($insertSetAddressStart);
                PassengerHistoryAddress::insertChunk($insertSetAddressStart);
            }
        }

        if (!empty($getOffAddArray)) {
            $addressArray               = $this->_getPassengerAddress($getOffAddArray);
            $passengerHistoryAddressEnd = PassengerHistoryAddress::findOne([
                'passenger_info_id' => $this->userInfo['id'],
                'address' => $addressArray['address'],
                'detail_name' => $addressArray['detail_name'],
                'type' => PassengerHistoryAddress::TYPE_GET_OFF
            ]);
            if (!$passengerHistoryAddressEnd) { //
                $insertSetAddressEnd = ArrayHelper::merge([
                    'passenger_info_id' => $this->userInfo['id'],
                    'passenger_phone' => $this->userInfo['phone'],
                    'type' => PassengerHistoryAddress::TYPE_GET_OFF,
                ], $addressArray);
                \Yii::info($insertSetAddressEnd);
                PassengerHistoryAddress::insertChunk($insertSetAddressEnd);
            }
        }

    }

    /**
     * record History Car Person
     *
     * @param $otherPhone
     * @param $otherName
     * @throws UserException
     */

    private function _recordHistoryCarPerson($otherPhone, $otherName)
    {
        $passengerHistoryCarPersonTable = PassengerHistoryCarPerson::findOne([
            'passenger_info_id' => $this->userInfo['id'],
            'use_car_person_phone' => $otherPhone,
        ]);
        if (!$passengerHistoryCarPersonTable) {
            PassengerHistoryCarPerson::insertChunk([
                'passenger_info_id' => $this->userInfo['id'],
                'passenger_phone' => $this->userInfo['phone'],
                'use_car_person_name' => $otherName,
                'use_car_person_phone' => $otherPhone,
            ]);
        }
    }

    /**
     * call java service order car
     *
     * @param $orderData
     * @return array|mixed
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _orderCar($orderData)
    {
        $serverOrder       = ArrayHelper::getValue($this->_params, 'api.order.serverName');
        $methodCallCar     = ArrayHelper::getValue($this->_params, 'api.order.method.callingCar');
        $httpClientOrder   = new YesinCarHttpClient(['serverURI' => $serverOrder]);
        $responseOrderData = $httpClientOrder->post($methodCallCar, $orderData);

        return $responseOrderData;
    }

    /**
     * dispatch Order By Calling Java service
     *
     * @param $orderId
     * @return array|mixed
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _dispatchOrder($orderId)
    {
        $httpClientData       = ['orderId' => $orderId];
        $serverDispatch       = ArrayHelper::getValue($this->_params, 'api.dispatch.serverName');
        $methodDispatch       = ArrayHelper::getValue($this->_params, 'api.dispatch.method.dispatchOrder');
        $httpClientDispatch   = new YesinCarHttpClient(['serverURI' => $serverDispatch]);
        $responseDispatchData = $httpClientDispatch->post($methodDispatch, $httpClientData);

        return $responseDispatchData;
    }


    /**
     * 打车下订单
     *
     * @return mixed|\yii\web\Response
     * @throws \Throwable
     * @throws \yii\db\Exception
     */

    public function actionCallingCar()
    {
        $request        = $this->getRequest();
        $orderId        = (int)$request->post('orderId');
        $orderType      = (int)$request->post('orderType');
        $otherName      = trim($request->post('otherName'));
        $otherPhone     = trim($request->post('otherPhone'));
        $userFeature    = $request->post('userFeature');
        $getOnAddArray  = $request->post('getOn');
        $getOffAddArray = $request->post('getOff');
        $flightInfo     = $request->post('flight');
        try {
            if (empty($orderId) || empty($orderType)) {
                throw new \InvalidArgumentException('Params error!', 1008);
            }
            if (!$this->checkOrderIdBelongToUser($this->userInfo['id'], $orderId)) {
                throw new \RuntimeException('Order id not belong to user', 999);
            }
            $commonOrder = new CommonOrder($orderId);
            $riskLimit = ServiceLogic::getOrderRiskTopByCityCode($commonOrder->cityCode);
            $this->_orderCheckBeforeCallingCar($orderId,$riskLimit,$commonOrder);
        } catch (UserException $exception) {
            \Yii::info($exception->getMessage());
            return $this->renderErrorJson($exception);
        } catch (\Exception $exception){
            \Yii::info($exception->getMessage());
            throw $exception;
        }

        $trans = $this->beginTransaction();
        try {
            if ($flightInfo !== null) {
                /**
                 * "flightNumber":"NH1583",
                 * "flightDate":"2018-10-17",
                 * "deptCityCode": "NAY",//出发城市三字码
                 * "destCityCode": "PVG"//目的城市三字码
                 */
                $flightNumber = ArrayHelper::getValue($flightInfo, 'flightNumber', '');
                $flightDate   = ArrayHelper::getValue($flightInfo, 'flightDate', '');
                $deptCityCode = ArrayHelper::getValue($flightInfo, 'deptCityCode', '');
                $destCityCode = ArrayHelper::getValue($flightInfo, 'destCityCode', '');
                if ($flightNumber && $flightDate && $deptCityCode && $destCityCode) {//1201 航班订阅
                    FlightLogic::subscribeFlight($flightNumber, $flightDate, $deptCityCode, $destCityCode, $this->userInfo['phone'], $this->userInfo['id'], $orderId);
                }

            }
            /*************************************余额冻结功能*****************************/
            $yid   = $this->userInfo['id'];
            $price = OrderUseCoupon::fetchFieldBy(['order_id' => $orderId], 'after_use_coupon_moeny');
            if (null === $price) {
                $price = OrderRulePrice::fetchFieldBy(['order_id' => $orderId, 'category' => OrderRulePrice::PRICE_TYPE_FORECAST], 'total_price');
            }
            $freezePostData = compact('yid', 'price', 'orderId');
            $freezePostData['limitPrice'] = $riskLimit;
            $this->_FreezeBalance($freezePostData);
            /************************************end冻结余额*********************************************/
            $this->trigger(self::EVENT_BEFORE_CALLING_CAR);
            $dataCallCar = compact('orderId', 'orderType', 'otherName', 'otherPhone', 'userFeature');
            $dataCallCar = array_filter($dataCallCar, function ($v) {
                return !empty($v);
            });
            if ($orderType == Order::ORDER_FOR_OTHER) {
                $this->_recordHistoryCarPerson($otherPhone, $otherName);
            }
            $this->_recordHistoryPlace($getOnAddArray, $getOffAddArray);
            $responseOrderData = $this->_orderCar($dataCallCar);
            /** @var \yii\httpclient\Response $response */
            if (isset($responseOrderData['code']) && $responseOrderData['code'] == Common::SUCCESS_CODE) {
                $responseDispatchData = $this->_dispatchOrder($orderId);
                if (isset($responseDispatchData['code']) && $responseDispatchData['code'] == Common::SUCCESS_CODE) {
                    $this->trigger(self::EVENT_AFTER_CALLING_CAR);
                    $this->lockOrderCoupon($orderId);// 绑定优惠券 on 2018-11-7
                    $trans->commit();
                    return $this->asJson(['code' => Common::SUCCESS_CODE, 'message' => 'success',]);
                } else {
                    $trans->rollBack();
                    \Yii::info($responseDispatchData,__METHOD__ .':dispatchCar');
                    return $this->asJson(['code' => Common::ERROR_CODE, 'message' => CConstant::SERVER_EXCEPTION_TEXT]);
                }
            } else {
                $trans->rollBack();
                $msg = (isset($responseOrderData['code']) && $responseOrderData['code'] == 500) ?
                    CConstant::SERVER_EXCEPTION_TEXT :
                    $responseOrderData['message'];
                \Yii::info($responseOrderData,__METHOD__.':orderCar');
                return $this->asJson(['code' => Common::ERROR_CODE, 'message' => $msg]);
            }
        } catch (UserException $exception) {
            $trans->rollBack();
            \Yii::info($exception->getMessage());
            return $this->renderErrorJson($exception);
        } catch (\Throwable $ex) {
            $trans->rollBack();
            \Yii::info($ex->getMessage());
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }
    }

    /**
     * get order reason type
     *
     * @return array
     */

    public function actionGetCancelOrderReasonType()
    {
        $cancelOrderReasonText = \Yii::$app->params['cancelOrderReason'];
        $data                  = [];
        foreach ($cancelOrderReasonText as $k => $v) {
            $data[] = ['type' => $k, 'text' => $v];
        }
        return Json::success($data);
    }

    /**
     * submit cancel order reason
     *
     * @return array|mixed
     * @throws \Exception
     */

    public function actionSubmitCancelOrderReason()
    {
        $request    = $this->getRequest();
        $orderId    = (int)$request->post('orderId');
        $type       = (int)$request->post('type');//取消原因类型,
        $reasonText = trim($request->post('reasonText', ''));
        try {
            if (empty($type) || empty($orderId)) {
                throw new InvalidArgumentException('Params error!', 1001);
            }
            if (!$this->checkOrderIdBelongToUser($this->userInfo['id'], $orderId)) {
                throw new \RuntimeException('Order id not belong to user', 999);
            }
            $orderCancelRecord = OrderCancelRecord::getLastOne(['order_id' => $orderId]);
            if (empty($orderCancelRecord)) {
                throw new \RuntimeException('order not canceled!', 1002);
            }
            $orderCancelRecord->updateChunk([
                'reason_type' => $type,
                'reason_text' => $reasonText,
            ]);
            return Json::success();
        } catch (UserException $ex) {
            return $this->renderErrorJson($ex);
        } catch (\Exception $ex) {
            \Yii::info($ex->getMessage(),__METHOD__);
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }
    }

    /**
     * precancel order
     *
     * @return array|mixed
     */

    public function actionPreCancelOrder()
    {
        $request = $this->getRequest();
        $orderId = (int)$request->post('orderId');
        try {
            $order = Order::getOne(['id' => $orderId, 'passenger_info_id' => $this->userInfo['id']]);
            if (!$order) {
                throw new \RuntimeException('Can not find and order!', 1001);
            }
            $driverStatus = Order::fetchFieldBy(['id' => $orderId], 'driver_status');
            if ($driverStatus > 3) {
                throw new UserException('服务中订单不能取消', 1002);
            } elseif ($driverStatus == 3) {
                $orderRulePriceTable = OrderRulePrice::findOne(['order_id' => $orderId, 'category' => CConstant::TYPE_FORECAST_ORDER]);
                if (empty($orderRulePriceTable)) {
                    throw new \RuntimeException('Can not find and order Price Model!', 1003);
                }
                if ($orderRulePriceTable->service_type_id == 1) {
                    $cancelFee = $orderRulePriceTable->base_price;
                } else {
                    $cancelFee = $orderRulePriceTable->lowest_price;
                }
            } else {
                $cancelFee = 0;
            }
            //if($driverStatus == 0){
            if ($driverStatus < 3) {
                $message = '已经派车成功,是否取消本次用车';
            } else {
                $message = '由于司机已到达上车地,取消用车将产生取消费' . $cancelFee . '元!';
            }
            return $this->asJson([
                'code' => CConstant::SUCCESS_CODE,
                'message' => $message,
                'data' => [
                    'currentDriverStatus' => $driverStatus,
                    'cancelFee' => $cancelFee
                ]
            ]);

            /**
             * return Json::success([
             * 'currentDriverStatus'=>$currentDriverStatus,//0：没有司机接单   1：司机接单   2：司机到达上车点  3：开始行程   4：结束行程  5：发起收款  6：司机取消
             * 'cancelFee'=>15 //取消时应支付的费用
             * ]);
             */
        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Exception $exception) {
            \Yii::info($exception->getMessage(),__METHOD__);
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }
    }

    /**
     * @return array|mixed
     * @throws \yii\db\Exception
     */

    public function actionCancelOrder()
    {
        $request = $this->getRequest();
        $phone   = $this->userInfo['phone'];
        $orderId = (int)$request->post('orderId');
        $trans   = $this->beginTransaction();
        try {
            $orderModel = Order::findOne(['id' => $orderId, 'passenger_info_id' => $this->userInfo['id']]);
            if (!$orderModel) {
                throw new \RuntimeException('cannot find any Model', 1001);
            }
            if ($orderModel->driver_status > 3) {
                throw new UserException('订单服务中,无法取消', 1002);
            }
            //$orderStatus = $orderModel->status;
            if ($orderModel->status == 9 || $orderModel->is_cancel == 1) {
                throw new UserException('该订单已经被取消过了！', 1003);
            }
            $orderStatus           = $orderModel->status; //记录订单当前状态,用于判断是否触发黑名单
            $orderModel->is_cancel = 1;
            $orderModel->status    = 9;
            $affect                = $orderModel->save(false);
            if (!$affect) {
                throw new UserException($orderModel->getFirstError(), 1004);
            }
            $orderCancelRecordModel = new OrderCancelRecord();
            $payResponse            = '';
            if ($orderStatus <= 3) {
                $isCharge   = OrderCancelRecord::USER_NO_CHARGE;
                $cancelCost = 0;
            } else {// 司机去乘客产生费用
                $isCharge       = OrderCancelRecord::USER_HAS_CHARGE;
                $orderRulePrice = OrderRulePrice::findOne(['order_id' => $orderId, 'category' => OrderRulePrice::PRICE_TYPE_FORECAST]);
                //$cancelCost  = 15; //取消时支付费用
                if ($orderRulePrice->service_type_id == 1) {
                    $cancelCost = $orderRulePrice->base_price;
                } else {
                    $cancelCost = $orderRulePrice->lowest_price;
                }
                $payResponse = Wallet::orderPay($orderId, $this->userInfo['id'], $cancelCost, 0, 0, 2);
                \Yii::info($payResponse);

            }
            $orderCancelRecordModel->setAttributes([
                'order_id' => $orderId,
                'is_charge' => $isCharge,
                'cancel_cost' => $cancelCost,
                'operator_type' => OrderCancelRecord::OPERATOR_TYPE_USER,
                'operator' => $this->userInfo['id']
            ]);
            if (!$orderCancelRecordModel->validate()) {
                throw new UserException($orderCancelRecordModel->getFirstError(), 1003);
            }
            if (!$orderCancelRecordModel->save()) {
                throw new UserException($orderCancelRecordModel->getFirstError(), 1004);
            }
            if ($orderStatus > 1) { //如果司机已接单,才触发黑名单机制
                BlacklistDashboard::addBlacklist($phone);
            }

            $this->unfreezeBalance($this->userInfo['id'], $orderId); // 余额解冻 解冻代码
            $this->unlockOrderCoupon($orderId); //解绑优惠券  on 2018-11-1

            $signal = ($cancelCost == 0) ? 301 : 302;
            if ($orderModel->driver_id) { // 如果有司机
                $this->_sendCancelOrderMsg($orderModel, $signal, $cancelCost, $orderStatus);
            }
            $trans->commit();
            if ($payResponse === false) { // 支付失败
                return Json::success(['cancelFee' => $cancelCost, 'remainPrice' => $cancelCost]);
            } elseif ($payResponse === true) { //支付成功
                return Json::success(['cancelFee' => $cancelCost, 'remainPrice' => 0]);
            } elseif (is_numeric($payResponse)) { //有尾款
                return Json::success(['cancelFee' => $cancelCost, 'remainPrice' => $payResponse]);
            } else {
                return Json::success(['cancelFee' => $cancelCost, 'remainPrice' => 0]);
            }

        } catch (UserException $exception) {
            $trans->rollBack();
            return $this->renderErrorJson($exception);
        } catch (\Exception $exception) {
            $trans->rollBack();
            \Yii::error($exception->getMessage());
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }

    }

    /**
     * @param \common\models\Order $orderTable
     * @param $signal
     * @param $orderStatus
     * @param $cancelCost
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _sendCancelOrderMsg(\common\models\Order $orderTable, $signal, $cancelCost, $orderStatus)
    {
        /**
         * SMS_145295103
         */
        /**时间XX时XX分，从XX到XX的订单已取消*/
        /**已到达上车地点，用户取消订单，已产生行程违约金*/
        $orderTime      = $orderTable->order_start_time ? $orderTable->order_start_time : $orderTable->start_time;
        $cabRunnerPhone = Common::decryptCipherText($orderTable->passenger_phone, true);
        $cabRunnerName  = PassengerInfo::fetchFieldBy(['id' => $orderTable->passenger_info_id], 'passenger_name');
        $startAddress   = $orderTable->start_address;
        $endAddress     = $orderTable->end_address;
        if ($orderTable->driver_status < 3) {
            //用户无责任，
            $messageContent = '时间' . $orderTime . ',从' . $startAddress . '到' . $endAddress . '的订单已经取消。';
        } else {
            $messageContent = '已到达上车地点，用户取消订单，已产生行程违约金。';
        }
        $pushType       = 3;
        $acceptId       = $orderTable->driver_id;
        $acceptIdentity = 2;
        //$sendId         = $this->userInfo['id'];
        $sendId       = 'system';
        $sendIdentity = 1;
        $title        = '订单取消';
        $messageBody  = ['content' => $messageContent, 'messageType' => $signal, 'message' => $title, 'orderId' => $orderTable->id];
        $messageType  = 1;
        $pushData     = compact('acceptId', 'sendId', 'acceptIdentity', 'sendIdentity', 'title', 'messageBody', 'messageType');
        self::jpush($pushType, $pushData, 1);

        //给乘客端推送消息
        $pushDataToPassenger = [
            'acceptId' => $this->userInfo['id'],
            'sendId' => 1,
            'acceptIdentity' => 1,
            'sendIdentity' => 1,
            'title' => $title,
            'messageType' => $messageType,
        ];
        if ($orderStatus <= 3) {
            /**'content'=>sprintf("由于司机到达上车地后%s分钟未联系到您,订单自动取消且产生取费,点击查看详情",$beyondDriverArrivedMinutes),*/
            $messageBodyToPassenger             = [
                'content' => '时间' . $orderTime . ',从' . $startAddress . '到' . $endAddress . '的订单已经取消。',
                'messageType' => $signal,
                'message' => $title,
                'orderId' => $orderTable->id
            ];
            $pushDataToPassenger['messageBody'] = $messageBodyToPassenger;
            self::jpush($pushType, $pushDataToPassenger, 1);

        } else {
            //向乘客端推送
            if (!empty($orderTable->driver_arrived_time)) {
                $beyondDriverArrivedMinutes = time() - strtotime($orderTable->driver_arrived_time);
                $beyondDriverArrivedMinutes = round($beyondDriverArrivedMinutes / 60);
            } else {
                $beyondDriverArrivedMinutes = 0;
            }
            $messageBodyToPassenger             = [
                'content' => sprintf("由于司机到达上车地后%s分钟未联系到您,订单自动取消且产生取费,点击查看详情", $beyondDriverArrivedMinutes),
                'messageType' => $signal,
                'message' => $title,
                'orderId' => $orderTable->id
            ];
            $pushDataToPassenger['messageBody'] = $messageBodyToPassenger;
            self::jpush($pushType, $pushDataToPassenger, 1);
        }


        if ($orderStatus <= 3) { //发无责短信
            \Yii::info($orderTable->status, 'status');
            //$smsTemplateNoticeCabRunner = 'SMS_145295103'; //通知订车人
            $smsTemplateNoticeCabRunner     = 'HX_0026'; //通知订车人
            $orderInfoTemplate = '%s从%s到%s';
            $orderInfoCharterCarTemplate ='%s从%s上车';
            if($orderTable->service_type < CConstant::SERVICE_CHARTER_CAR_HALF_DAY){
                $orderInfo = vsprintf($orderInfoTemplate,[
                    Common::convertTimeToNaturalLanguage($orderTime),
                    $orderTable->start_address,
                    $orderTable->end_address
                ]);
            }else{
                $orderInfo = vsprintf($orderInfoCharterCarTemplate,[
                    Common::convertTimeToNaturalLanguage($orderTime),
                    $orderTable->start_address,
                ]);
            }
            \Yii::info($orderInfo,'order-info');
            $smsTemplateNoticeCabRunnerData = [
                //'time' => Common::convertTimeToNaturalLanguage($orderTable->start_time),
                //'order_time' => Common::convertTimeToNaturalLanguage($orderTime),
                /* 'phone'=>Common::getHidePhone(($orderTable->order_type == 1)?$passengerPhone:$otherPhone),  // 乘车是自己或他人
                 'start_address'=>$startAddress,
                 'end_address'=>$endAddress,*/
                'orderInfo'=>$orderInfo,
                'servicePhone'=>\Yii::$app->params['serviceManFixedPhone']
            ];
            Common::sendMessageNew($cabRunnerPhone, $smsTemplateNoticeCabRunner, $smsTemplateNoticeCabRunnerData);
        } else { // 乘客有责
            \Yii::info($orderTable->status, 'status');
            //$smsTemplateNoticeCabRunnerHasCharge = 'SMS_145290150'; //通知订车人
            $smsTemplateNoticeCabRunnerHasCharge     = 'HX_0039'; //通知订车人
            $smsTemplateNoticeCabRunnerDataHasCharge = [
                'time' => Common::convertTimeToNaturalLanguage($orderTable->start_time),
                'order_time' => Common::convertTimeToNaturalLanguage($orderTime),
                'money' => $cancelCost,
            ];
            Common::sendMessageNew($cabRunnerPhone, $smsTemplateNoticeCabRunnerHasCharge, $smsTemplateNoticeCabRunnerDataHasCharge);

        }
        if ($orderTable->order_type == 2) {
            //$smsTemplateNoticeOther = 'SMS_145295100'; //给他人叫车
            $smsTemplateNoticeOther     = 'HX_0008'; //给他人叫车
            $otherPhone                 = Common::decryptCipherText($orderTable->other_phone, true);
            $smsTemplateNoticeOtherData = [
                'passenger_name' => $cabRunnerName,
                'time' => $orderTime,// 用车时间
                'service_man_fixed_phone' => \Yii::$app->params['serviceManFixedPhone'], //1201新加
            ];
            Common::sendMessageNew($otherPhone, $smsTemplateNoticeOther, $smsTemplateNoticeOtherData);
        }
        /**
         * SMS_145290150 司机到达出发点-用户取消-通知乘车人（有责）
         * SMS_145295103 帮他人叫车-后台取消订单-通知订车人（无责）
         * SMS_145295100 人叫帮他人叫车-后台取消订单-通知乘车人（无责）
         */


    }

    /**
     * Share trip
     *
     * @return array
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    public function actionShareTrip()
    {
        $request = $this->getRequest();
        $orderId = $request->post('orderId');
        if (empty($orderId)) {
            throw new InvalidArgumentException('Params error!');
        }
        $orderIdEncodeStr = (new XEncode())->encode($orderId);
        $orderTable = Order::findOne($orderId);
        $phone = Common::decryptCipherText($orderTable->passenger_phone,true);
        $messageTemplate = '您的好友%s（手机号：%s）正在乘坐逸品出行专车服务，点击此处%s查看好友行驶位置>>';
        $passengerNickName = PassengerInfo::fetchFieldBy(['id'=>$orderTable->passenger_info_id],'passenger_name');
        $messageUrl = \Yii::$app->params['shareTripH5Url'] . '?orderId=' . $orderIdEncodeStr;
        $message = vsprintf($messageTemplate,[$passengerNickName, $phone, $messageUrl]);
        return Json::success([
            'title' => '我在乘坐逸品出行的专车',
            'content' => '逸品出行，畅享出行美好时光！戳这里查看我的行程路线>>',
            'image' => \Yii::$app->params['shareTripLogoUrl'],
            'url' => $messageUrl,
            'message'=>$message,
        ]);
    }

    /**
     * Get trip Detail
     *
     * @return array|mixed
     * @throws \yii\base\InvalidConfigException
     */

    public function actionGetTripDetail()
    {
        $orderIdEncodeStr = $this->getRequest()->post('orderId');
        try {
            $orderId = (new XEncode())->decode($orderIdEncodeStr);
            if (!is_numeric($orderId)) {
                throw new InvalidArgumentException('Params error!', 1001);
            }
            $order = Order::findOne(['id' => $orderId]);
            if (!$order->driver_id) {
                throw new \RuntimeException('cannot find driver!');
            }
            $driver                 = DriverInfo::findOne($order->driver_id);
            $evalDriver             = EvaluateDriver::find()->where('driver_id=:driverId', [':driverId' => $order->driver_id])
                ->select('grade')->column();
            $driverGrade            = empty($evalDriver) ? 0 : array_sum($evalDriver) / count($evalDriver);
            $driverGrade            = number_format($driverGrade, 1);
            $tripData               = [
                'plateNum' => $order->plate_number,
                'startAddress' => $order->start_address,
                'endAddress' => $order->end_address,
                'driverName' => $driver->driver_name,
                'driverHeadImg' => $driver->head_img,
                'orderStartTime' => $order->order_start_time,
                'driverGrade' => $driverGrade
            ];
            if(!empty($tripData['driverHeadImg'])){
                $tripData['driverHeadImg'] = \Yii::$app->params['ossFileUrl'] . $tripData['driverHeadImg'];
            }
            $tripData['startPoint'] = [
                'longitude' => $order->start_longitude,
                'latitude' => $order->start_latitude,
                'addressName' => $order->start_address,
            ];

            $tripData['endPoint'] = [
                'longitude' => $order->end_longitude,
                'latitude' => $order->end_latitude,
                'addressName' => $order->end_address,
            ];

            $drivingTrack = $this->getOrderTrajectoryByOrderId($orderId);
            if (is_array($drivingTrack)) {
                $tripData['drivingTrack'] = $drivingTrack;
            } else {
                $tripData['drivingTrack'] = '';
            }
            $currentTime = date('Y-m-d H:i:s');
            $adTable     = Ads::find()->where(['and', ['=', 'position_id', CConstant::SHARE_TRIP_AD_POSITION_ID], ['<', 'start_time', $currentTime], ['>', 'end_time', $currentTime]])->one();

            if ($adTable) {
                $tripData['ad']['img'] = trim(\Yii::$app->params['ossFileUrl'], '/') . '/' . $adTable->down_load_url;
                $tripData['ad']['url'] = $adTable->link_url;
            } else {
                $tripData['ad']['img'] = $tripData['ad']['url'] = "";
            }
            \Yii::info($tripData);

            return Json::success($tripData);

        } catch (UserException $exception) {
            return $this->renderErrorJson($exception);
        } catch (\Throwable $ex){
            \Yii::info($ex->getMessage(),__METHOD__);
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }

    }

    /**
     * Refresh Location
     *
     * @return array
     * @throws \Throwable
     */

    public function actionRefreshLocation()
    {
        $orderIdEncodeStr = $this->getRequest()->post('orderId');
        try {
            $orderId = (new XEncode())->decode($orderIdEncodeStr);
            if (!is_numeric($orderId)) {
                throw new InvalidArgumentException('Params error!', 1001);
            }
            $drivingTrack = $this->getOrderTrajectoryByOrderId($orderId);
            if (is_array($drivingTrack)) {
                return Json::success($drivingTrack);
            }
            return Json::error();
        } catch (\Throwable $ex) {
            \Yii::error($ex->getMessage(), __METHOD__);
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }
    }


    /**
     * 解冻余额
     *
     * @param $yid
     * @param $orderId
     * @return array|mixed
     * @throws UserException
     * @throws \yii\base\InvalidConfigException
     */

    private function _unfreezeBalance($yid, $orderId)
    {
        $server     = ArrayHelper::getValue(\Yii::$app->params, 'api.pay');
        $httpClient = new YesinCarHttpClient(['serverURI' => $server['serverName']]);
        $method     = $server['method']['unfreeze'];
        $clientData = compact('yid', 'orderId');
        $response   = $httpClient->post($method, $clientData);
        \Yii::info($response, 'cancel-order');
        return $response;
    }

    /**
     * @return array|mixed
     * @throws \Exception
     */
    public function actionGetCharterRealTimeStatus()
    {
        // 检查订单和计价
        $orderId = intval($this->getRequest()->post('orderId'));
        try {
            if (!$orderId) {
                throw new InvalidArgumentException('Params error!', 1001);
            }
            $order = Order::findOne(['id' => $orderId, 'passenger_info_id' => $this->userInfo['id']]);
            if (!$order) {
                throw new \RuntimeException('Data error!', 1002);
            }
            $orderRulePrice = OrderRulePrice::findOne(['order_id' => $orderId]);
            if (!$orderRulePrice) {
                throw new \RuntimeException('Order valuation error!', 1003);
            }
            // 请求实时价格信息
            $now       = time();
            $reqParams = [
                'orderId' => $orderId,
                'carId' => $order->car_id,
                'startTime' => strtotime($order->receive_passenger_time) * 1000,
                'endTime' => $now * 1000,
            ];
            $result    = self::httpGet('valuation.currentPrice', $reqParams);
            // 请求结果检查
            if (is_string($result) || (isset($result['code']) && $result['code'] != 0)) {
                \Yii::error($result, 'charter-car');
                /*\Yii::error($result,'charter-car');
               throw new UserException('Java Api error',1004);*/
                return Json::success(['distance' => '0.0', 'time' => '0']);
            }
            // 打包和返回数据
            $data = [
                'distance' => $result['data']['distance'] ?? "0.0",
                'time' => round((time() - strtotime($order->receive_passenger_time)) / 60),
            ];

            return Json::success($data);
        } catch (UserException $ex) {
            return Json::message($ex->getMessage());
        } catch (\Exception $ex) {
            \Yii::error($ex->getMessage(), 'charter-char');
            return Json::error([],1,CConstant::SERVER_EXCEPTION_TEXT);
        }


    }

    /**
     * @throws \Exception
     */
    public function actionTest()
    {
    }

}
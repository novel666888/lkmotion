<?php
/**
 * Created by PhpStorm.
 * User: zzr
 * Date: 2018/9/16
 * Time: 18:32
 */
namespace console\controllers;

use common\models\CarDispatchTimeThresholdSet;
use common\models\Order;
use common\models\OrderRulePrice;
use common\services\CConstant;
use common\services\YesinCarHttpClient;
use common\util\Common;
use yii\console\Controller;
use yii\helpers\ArrayHelper;

class PendingOrderController extends Controller
{
    const RESERVE_FORCE_DISPATCH = 2; //预约用车待派订单开启强派模式
    const RESERVE_FORCE_DISPATCH_DEFAULT = 30; //时间阈值-预约用车待派订单开启强派模式
    /**
     * @var \yii\redis\Connection $redis
     */
    private $_redis;
    public function init()
    {
        $this->_redis = \Yii::$app->redis;
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * @uses php yii pending-order/send-sms  //
     * 待派订单按照【距离用车时间还剩时间】升序排列，当小于等于30分钟时红色预警显示，
     * 当小于等于（【时间阈值-预约用车待派订单开启强派模式】-10分钟）给对应的客服推送预警短信内容
     *
     */
    public function actionSendSms()
    {
        $keyPrefix = 'HadSendSms:';
        $receiverPhone = \Yii::$app->params['serviceManPhone'];
        //$timeThresholdForceDispatch = 30; //  //【时间阈值-预约用车待派订单开启强派模式】//从数据库中取
        $results = Order::find()
            ->select([
                'orderId' => 'id',
                'orderNum' => 'order_number',
                'useCarTime' => 'order_start_time',
                'getOnAddress' => 'start_address',
                'getOffAddress' => 'end_address',
            ])->where(['and',
                    ['is', 'driver_id', null],
                    ['=', 'is_fake_success', Order::IS_FAKE_SUCCESS],
                    ['=', 'is_cancel',Order::IS_NOT_CANCEL],
                    ['>', 'order_start_time', date('Y-m-d H:i:s')]
            ])
              ->asArray()
              ->all();
        foreach ($results as $k=>$v){
            $leftTime = strtotime($v['useCarTime'])-time();
            $leftTime = round($leftTime / 60);
            $orderRulePrice = OrderRulePrice::findOne(['order_id'=>$v['orderId'],'category'=>CConstant::TYPE_FORECAST_ORDER]);
            $CarDispatchTimeThresholdSetTable = CarDispatchTimeThresholdSet::findOne([
                'city_code'=>$orderRulePrice->city_code,
                //'service_type_id'=>$orderRulePrice->service_type_id,
                'time_threshold_type'=>$orderRulePrice->service_type_id,
            ]);
            if(!$CarDispatchTimeThresholdSetTable){
                $timeThresholdForceDispatch = self::RESERVE_FORCE_DISPATCH_DEFAULT;
            }else{
                $timeThresholdForceDispatch = $CarDispatchTimeThresholdSetTable->time_threshold;
            }
            if($leftTime <= $timeThresholdForceDispatch-10){
                //$smsTemplate = 'SMS_145500017';
                $smsTemplate = 'HX_0015';
                $sendDataContent = [
                    'order_id'=>$v['orderNum'],
                    'time'=>$leftTime,
                ];
                if((bool)$this->_redis->exists($keyPrefix.$v['orderId']) == false){
                    $returnInfo = Common::sendMessageNew($receiverPhone,$smsTemplate,$sendDataContent);
                    if($returnInfo){
                        $this->_redis->setex($keyPrefix.$v['orderId'],$leftTime*60,true);
                    }
                    echo $v['orderNum'].' had send msg to service man'.PHP_EOL;
                    \Yii::info($returnInfo,'send-sms');
                }

            }
        }
    }

    /**
     * @uses
     *  php yii pending-order/force-dispatch-untreated-order
     */

    public function actionForceDispatchUntreatedOrder()
    {
        $keyPrefix = 'HadForceDispatchList:';
        //$timeThresholdForceDispatch = 30; //
        $results = Order::find()
            ->select([
                'orderId' => 'id',
                'orderNum' => 'order_number',
                'useCarTime' => 'order_start_time',
                'getOnAddress' => 'start_address',
                'getOffAddress' => 'end_address',
            ])->where(['and',
                ['is', 'driver_id', null],
                ['=', 'is_fake_success', Order::IS_FAKE_SUCCESS],
                ['=', 'is_cancel',Order::IS_NOT_CANCEL],
                ['>', 'order_start_time', date('Y-m-d H:i:s')]
            ])
            ->asArray()
            ->all();
        foreach ($results as $k => $v) {
            $leftTime                         = strtotime($v['useCarTime']) - time();
            $leftTime                         = round($leftTime / 60);
            $orderRulePrice                   = OrderRulePrice::findOne(['order_id' => $v['orderId'], 'category' => CConstant::TYPE_FORECAST_ORDER]);
            $CarDispatchTimeThresholdSetTable = CarDispatchTimeThresholdSet::findOne([
                'city_code' => $orderRulePrice->city_code,
                //'service_type_id' => $orderRulePrice->service_type_id,
                'time_threshold_type' => $orderRulePrice->service_type_id,
            ]);
            if (!$CarDispatchTimeThresholdSetTable) {
                $timeThresholdForceDispatch = self::RESERVE_FORCE_DISPATCH_DEFAULT;
            } else {
                //【时间阈值-预约用车待派订单开启强派模式】//从数据库中取
                $timeThresholdForceDispatch = $CarDispatchTimeThresholdSetTable->time_threshold;
            }
            if ($leftTime <= $timeThresholdForceDispatch) {
                if ((bool)$this->_redis->exists($keyPrefix . $v['orderId']) == false) {
                    $response = $this->_forceDispatch($v['orderId']);
                    $this->_redis->setex($keyPrefix . $v['orderId'], $leftTime*60, true);
                    echo $v['orderNum'] . ' is dispatched last time!' . PHP_EOL;
                    \Yii::info($response,'last-force-dispatch');
                }
            }

        }
    }


    /**
     * 订单强派
     *
     * @param $orderId
     * @return array|mixed
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\base\UserException
     */
    private function _forceDispatch($orderId)
    {
        $server = ArrayHelper::getValue(\Yii::$app->params,'api.dispatch');
        $httpClient = new YesinCarHttpClient(['serverURI'=>$server['serverName']]);
        $clientData = ['orderId'=>$orderId];
        $response =  $httpClient->post($server['method']['dispatchOrder'],$clientData);

        return $response;
    }

}